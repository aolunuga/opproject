/*
 * Copyright(c) OnePoint Software GmbH 2007. All Rights Reserved.
 */

// Helper script for new/edit project

require "onepoint/project/modules/resource/scripts/open_resource_chooser.jes";
require "onepoint/project/modules/project_planning/scripts/attachments.jes";

import onepoint.express.XDisplay;
import onepoint.service.XMessage;
import onepoint.express.XComponent;

function checkAdjust(event) {
   adjustCell = event.event_source;
   isChecked = adjustCell.getBooleanValue();
   hourlyRateCell = adjustCell.getParent().getChild(3);
   externalRateCell = adjustCell.getParent().getChild(4);
   resourceID = adjustCell.getParent().getStringValue();

   hourlyRateCell.setEnabled(isChecked);
   externalRateCell.setEnabled(isChecked);
   if (isChecked == true) {
      request = new XMessage;
      request.setAction("ResourceService.getResourceRates");
      request.setArgument("resource_id",resourceID);
      response = XDisplay.getClient().invokeMethod(request);
      internalRate = response.getArgument("InternalRate");
      externalRate = response.getArgument("ExternalRate");
      hourlyRateCell.setDoubleValue(internalRate);
      externalRateCell.setDoubleValue(externalRate);
   }
   else {
      hourlyRateCell.setValue(null);
      externalRateCell.setValue(null);
   }
   // Update resource table
   resourceTable = XDisplay.getActiveForm().findComponent("ResourcesTable");
   resourceTable.doLayout();
   resourceTable.repaint();
}

function removeProjectAssignment(event){
   form = XDisplay.getActiveForm();
   assigned_resource_data_set = form.findComponent("AssignedResourceDataSet");
   selected_rows = assigned_resource_data_set.selectedRows();
   childRows = new ArrayList;
   if(selected_rows.size() > 0)
   {
      i = 0;
      while (i < selected_rows.size()) {
         dataRow = selected_rows.get(i);
         childRows.addAll(dataRow.getSubRows());
         i++;
      }
      assigned_resource_data_set.removeDataRows(childRows);
      assigned_resource_data_set.removeDataRows(selected_rows);
      resourceTable = form.findComponent("ResourcesTable");
      resourceTable.update();
   }
}

function addProjectAssignment(event){
   assigned_resource_data_set = XDisplay.getActiveForm().findComponent("AssignedResourceDataSet");
   i = 0;
   j = 0;
   while (i < assigned_resource_data_set.getChildCount()) {
      if(assigned_resource_data_set.getChild(i).getOutlineLevel() == 0){
         resource_ids[j] = XValidator.choiceID(assigned_resource_data_set.getChild(i).getStringValue());
         j++;
      }
      i++;
   }
   readonly_resource_data_set = XDisplay.getActiveForm().findComponent("ReadOnlyResourceDataSet");
   index = 0;
   while (index < readonly_resource_data_set.getChildCount()) {
      resource_ids[i] = XValidator.choiceID(readonly_resource_data_set.getChild(index).getStringValue());
      j++;
      index++;
   }
   openResourceChooser("MainFrame", "addProjectResourceOk", resource_ids, true, false, true, null);
}

function removeToDos(event) {
   data_set = XDisplay.getActiveForm().findComponent("ToDosSet");
   selected_rows = data_set.selectedRows();
   if (selected_rows.size() > 0) {
      data_set.removeDataRows(selected_rows);
      XDisplay.getActiveForm().findComponent("ToDosTableBox").update();
   }
}

function addToDo(event) {
   data_set = XDisplay.getActiveForm().findComponent("ToDosSet");
   data_row = data_set.newDataRow();
   data_set.addDataRow(data_row);
   data_cell = XComponent.newDataCell();
   data_cell.setBooleanValue(false);
   data_cell.setEnabled(true);
   data_row.addChild(data_cell);
   data_cell = XComponent.newDataCell();
   data_cell.setStringValue("");
   data_cell.setEnabled(true);
   data_row.addChild(data_cell);
   data_cell = XComponent.newDataCell();
   data_cell.setIntValue(5);
   data_cell.setEnabled(true);
   data_row.addChild(data_cell);
   data_cell = XComponent.newDataCell();
   data_cell.setEnabled(true);
   date = new Date;
   data_cell.setDateValue(date);
   data_row.addChild(data_cell);
   XDisplay.getActiveForm().findComponent("ToDosTableBox").update();
}

function removeGoals(event) {
   data_set = XDisplay.getActiveForm().findComponent("GoalsSet");
   selected_rows = data_set.selectedRows();
   if (selected_rows.size() > 0) {
      data_set.removeDataRows(selected_rows);
      XDisplay.getActiveForm().findComponent("GoalsTableBox").update();
   }
}

function addGoal(event) {
   data_set = XDisplay.getActiveForm().findComponent("GoalsSet");
   data_row = data_set.newDataRow();
   data_set.addDataRow(data_row);
   data_cell = XComponent.newDataCell();
   data_cell.setBooleanValue(false);
   data_cell.setEnabled(true);
   data_row.addChild(data_cell);
   data_cell = XComponent.newDataCell();
   data_cell.setStringValue("");
   data_cell.setEnabled(true);
   data_row.addChild(data_cell);
   data_cell = XComponent.newDataCell();
   data_cell.setIntValue(5);
   data_cell.setEnabled(true);
   data_row.addChild(data_cell);
   XDisplay.getActiveForm().findComponent("GoalsTableBox").update();
}

//put the list of attachments into a XComponent so that the file objects can be replaced with their path
function addAttachmentListToDataSet(attachmentList) {
   attachmentListDataSet = XDisplay.getActiveForm().findComponent("AttachmentListDataSet");
   dataRow = attachmentListDataSet.newDataRow();
   attachmentListDataSet.addChild(dataRow);
   dataCell = XComponent.newDataCell();
   dataCell.setValue(attachmentList);
   dataRow.addChild(dataCell);
   return attachmentListDataSet;
}

function addURLAttachment(event) {
  addURL(event);
}

function addDocumentAttachment(event) {
   addDocument(event);
}

function removeAttachments(event) {
   remove(event);
}

function viewAttachment(event) {
   view(event);
}
