/*
 * Copyright(c) OnePoint Software GmbH 2007. All Rights Reserved.
 */

// Reporting script for work_report.oxf.xml

require "onepoint/project/modules/user/scripts/open_subject_chooser.jes";
require "onepoint/project/scripts/saveImage.jes";

import onepoint.express.XDisplay;
import onepoint.express.XValidator;
import onepoint.service.XMessage;

function chooseSubject(event) {
   openSubjectChooser("QueryFrame", "addSelectedSubject", true, false, null, false, null);
}

function addSelectedSubject(subject) {
   queryFrame = XDisplay.findFrame("QueryFrame");
   form = queryFrame.currentForm();
   userNameField = form.findComponent("UserNameField");
   userNameField.setStringValue(subject);
}

function runQuery() {
   form = XDisplay.findFrame("QueryFrame").currentForm();

   choice = form.findComponent("UserNameField").getStringValue();
   if (choice != null) {
      parameters.RunQuery = true;
      parameters.UserLocator = XValidator.choiceID(choice);
      parameters.Start = form.findComponent("StartField").getDateValue();
      parameters.Finish = form.findComponent("FinishField").getDateValue();
      XDisplay.findFrame("QueryFrame").refreshForm(parameters);
   }

}

function createRequest() {

   form = XDisplay.findFrame("QueryFrame").currentForm();
   error_label = form.findComponent("ErrorLabel");

   choice = form.findComponent("UserNameField").getStringValue();
   if (choice == null) {
      error_message = form.findComponent("InvalidUser").getText();
      error_label.setText(error_message);
      error_label.setVisible(true);
      form.doLayout();
      form.repaint();
      return null;
   }


   /*check for valid start date */
   start_date = form.findComponent("StartField").getDateValue();
   if (start_date == null) {
      error_message = form.findComponent("InvalidStartField").getText();
      error_label.setText(error_message);
      error_label.setVisible(true);
      form.doLayout();
      form.repaint();
      return null;
   }
   /*check for valid finish date */
   finish_date = form.findComponent("FinishField").getDateValue();
   if (finish_date == null) {
      error_message = form.findComponent("InvalidFinishField").getText();
      error_label.setText(error_message);
      error_label.setVisible(true);
      form.doLayout();
      form.repaint();
      return null;
   }

   //obtain the cost i18n names.
   costRequest = new XMessage;
   costRequest.setAction("SettingsService.getCostNames");
   client = XDisplay.getClient();
   costResponse = client.invokeMethod(costRequest);
   i18nMap = costResponse.getArgument("cost_names");


   //important: as we can only have one "mainfile" in a jar, we refer here to the jar!!!
   name = "workreport.jar";
   parameters.fromDate = start_date;
   parameters.toDate = finish_date;

   //add also the cost type parameters
   parameters.Travel = i18nMap.Travel;
   parameters.External = i18nMap.External;
   parameters.Material = i18nMap.Material;
   parameters.Miscellaneous = i18nMap.Miscellaneous;

   formats[0] = "PDF";

   request = new XMessage;
   request.setArgument("name", name);
   request.setArgument("parameters", parameters);
   request.setArgument("formats", formats);

   return request;
}

/**
 * Returns a HQL query that will be used to fill up the report.
 */
function getReportQuery() {
   form = XDisplay.findFrame("QueryFrame").currentForm();
   choice = form.findComponent("UserNameField").getStringValue();
   if (choice != null) {

      selectClause1 = "select resource.Name, resource.Description,  projectNode.Name, activity.Name, workslip.Date, workRecord.PersonnelCosts";
      selectClause2 = " , workRecord.ActualEffort, workRecord.TravelCosts, workRecord.MaterialCosts, workRecord.ExternalCosts, workRecord.MiscellaneousCosts";
      fromClause1 = " from OpWorkSlip workslip inner join workslip.Records workRecord inner join workRecord.Assignment asgn inner join asgn.Activity activity inner join activity.ProjectPlan plan";
      fromClause2 = " inner join plan.ProjectNode projectNode inner join asgn.Resource resource inner join resource.User user";
      whereClause = " where projectNode.Archived=false and workslip.Date >= ? and workslip.Date <= ? and user.id = ? order by resource.Name, projectNode.Name, workslip.Date";

      queryString = selectClause1 + selectClause2 + fromClause1 + fromClause2 + whereClause;
      query.queryString = queryString;

      userLocator = XValidator.choiceID(choice);
      fromDate = form.findComponent("StartField").getDateValue();
      toDate = form.findComponent("FinishField").getDateValue();

      query.queryParams[0] = fromDate;
      query.queryParams[1] = toDate;
      query.queryParams[2] = userLocator;
   }
   return query;
}

/**
 * Returns a map of [reportFieldName, reportFieldIndex] pairs that indicated how the fields from the report map to the
 * result of the query.
 */
function getReportFields() {
   result.rs_name = 0;
   result.rs_description = 1;
   result.pn_name = 2;
   result.ac_name = 3;
   result.ws_date = 4;
   result.op_personnelcosts = 5;
   result.op_actualeffort = 6;
   result.op_travelcosts = 7;
   result.op_materialcosts = 8;
   result.op_externalcosts = 9;
   result.op_miscellaneouscosts = 10;

   return result;
}

function getResourceMapId() {
   return null;
}

function prepareForm(event) {
   button = XDisplay.findFrame("QueryFrame").getForm().findComponent("PrintButton");
   dataSet = XDisplay.findFrame("QueryFrame").currentForm().findComponent("ResultSet");
   if (dataSet.getChildCount() > 0) {
      button.setEnabled(true);
   }
   else {
      button.setEnabled(false);
   }
   button.update();
   button = XDisplay.findFrame("QueryFrame").getForm().findComponent("RunQueryButton");
   button.setEnabled(true);
   button.update();
   button = XDisplay.findFrame("QueryFrame").getForm().findComponent("ResetQueryButton");
   button.setEnabled(true);
   button.update();
}

function saveTableCSV(event) {
   XDisplay.getActiveForm().findComponent("ResultTable").saveAsCSV("Save Work Report");
}

function saveTableImage(event) {
   saveAsImage(XDisplay.getActiveForm().findComponent("ResultTable"), "Save Work Report");
}