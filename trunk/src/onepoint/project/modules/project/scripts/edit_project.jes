/*
 * Copyright(c) OnePoint Software GmbH 2007. All Rights Reserved.
 */

// Controller script for edit_project.oxf.xml

require "onepoint/project/scripts/error.jes";
require "onepoint/project/modules/user/scripts/permissions_tab.jes";
require "onepoint/project/modules/resource/scripts/open_resource_chooser.jes";

import onepoint.express.XValidator;
import onepoint.express.XDisplay;
import onepoint.express.XComponent;
import onepoint.service.XMessage;

function ok(event) {
   form = XDisplay.getActiveForm();
   edit_mode = form.findComponent("EditMode").getBooleanValue();
   if (edit_mode) {
      ok_edit(event);
   } else {
      cancel(event);
   }
}

function ok_edit(event) {
   bypassFutureStartDateCheck = event.BypassFutureStartDateCheck;

   // Gather project-data
   form = XDisplay.getActiveForm();

   //check for future start dates
   project_data.Start = form.findComponent("Start").getDateValue();
   originalStartDate = form.findComponent("OriginalStartDate").getDateValue();
   if (bypassFutureStartDateCheck == null && project_data.Start.after(originalStartDate)) {
      Console.println("Start date in the future");
      dialog = XComponent.newDialog();
      dialog.loadForm("/modules/project/forms/confirm_startdate_future.oxf.xml");
      dialog.open();
      return;
   }

   project_id = form.findComponent("ProjectID").getStringValue();
   project_data.Name = form.findComponent("Name").getStringValue();
   project_data.Description = form.findComponent("Description").getStringValue();
   project_data.Finish = form.findComponent("Finish").getDateValue();
   project_data.Budget = form.findComponent("Budget").getDoubleValue();
   project_data.CalculationMode = form.findComponent("CalculationMode").getBooleanValue();
   project_data.ProgressTracked = form.findComponent("ProgressTracked").getBooleanValue();
   choice = form.findComponent("StatusChoice").getStringValue();
   if (choice != null) {
      project_data.Status = XValidator.choiceID(choice);
   }

   goals_set = XDisplay.getActiveForm().findComponent("GoalsSet");
   to_dos_set = XDisplay.getActiveForm().findComponent("ToDosSet");
   assigned_resource_set = XDisplay.getActiveForm().findComponent("AssignedResourceDataSet");   
   versions_set = XDisplay.getActiveForm().findComponent("VersionsSet");

   project_data.PermissionSet = form.findComponent("PermissionSet");
   
   request = new XMessage;
   request.setAction("ProjectService.updateProject");
   request.setArgument("project_id", project_id);
   request.setArgument("project_data", project_data);
   request.setArgument("goals_set", goals_set);
   request.setArgument("to_dos_set", to_dos_set);
   request.setArgument("resource_set", assigned_resource_set);
   request.setArgument("versions_set", versions_set);
   response = XDisplay.getClient().invokeMethod(request);

   if (handleError(form, response, "ErrorLabel") == true) {
      XDisplay.getActiveWindow().close();
      XDisplay.findFrame("MainFrame").refreshForm();
   }
}

function cancel(event) {
   XDisplay.getActiveWindow().close();
}

function addGoal(event) {
   data_set = XDisplay.getActiveForm().findComponent("GoalsSet");
   data_row = data_set.newDataRow();
   data_set.addDataRow(data_row);
   data_cell = XComponent.newDataCell();
   data_cell.setBooleanValue(false);
   data_cell.setEnabled(true);
   data_row.addChild(data_cell);
   data_cell = XComponent.newDataCell();
   data_cell.setStringValue("");
   data_cell.setEnabled(true);
   data_row.addChild(data_cell);
   data_cell = XComponent.newDataCell();
   data_cell.setIntValue(5);
   data_cell.setEnabled(true);
   data_row.addChild(data_cell);
   XDisplay.getActiveForm().findComponent("GoalsTableBox").update();
}

function removeGoals(event) {
   data_set = XDisplay.getActiveForm().findComponent("GoalsSet");
   selected_rows = data_set.selectedRows();
   if (selected_rows.size() > 0) {
      data_set.removeDataRows(selected_rows);
      XDisplay.getActiveForm().findComponent("GoalsTableBox").update();
   }
}

function addToDo(event) {
   data_set = XDisplay.getActiveForm().findComponent("ToDosSet");
   data_row = data_set.newDataRow();
   data_set.addDataRow(data_row);
   data_cell = XComponent.newDataCell();
   data_cell.setBooleanValue(false);
   data_cell.setEnabled(true);
   data_row.addChild(data_cell);
   data_cell = XComponent.newDataCell();
   data_cell.setStringValue("");
   data_cell.setEnabled(true);
   data_row.addChild(data_cell);
   data_cell = XComponent.newDataCell();
   data_cell.setIntValue(5);
   data_cell.setEnabled(true);
   data_row.addChild(data_cell);
   data_cell = XComponent.newDataCell();
   data_cell.setEnabled(true);
   date = new Date;
   data_cell.setDateValue(date);
   data_row.addChild(data_cell);
   XDisplay.getActiveForm().findComponent("ToDosTableBox").update();
}

function removeToDos(event) {
   data_set = XDisplay.getActiveForm().findComponent("ToDosSet");
   selected_rows = data_set.selectedRows();
   if (selected_rows.size() > 0) {
      data_set.removeDataRows(selected_rows);
      XDisplay.getActiveForm().findComponent("ToDosTableBox").update();
   }
}

function removeVersions(event) {
   data_set = XDisplay.getActiveForm().findComponent("VersionsSet");
   selected_rows = data_set.selectedRows();
   if (selected_rows.size() > 0) {
      dialog = XComponent.newDialog();
      header = XDisplay.getActiveForm().findComponent("ConfirmDialogHeader").getText();
      dialog.setText(header);
      form = dialog.loadForm("/modules/project/forms/confirm_version_delete.oxf.xml");
      form.findComponent("SelectedVersions").setListValue(selected_rows);
      dialog.open();
   }
}

function addProjectAssignment(event){
   assigned_resource_data_set = XDisplay.getActiveForm().findComponent("AssignedResourceDataSet");
   i = 0;
   while (i < assigned_resource_data_set.getChildCount()) {
      resource_ids[i] = XValidator.choiceID(assigned_resource_data_set.getChild(i).getStringValue());
      i++;
   }
   readonly_resource_data_set = XDisplay.getActiveForm().findComponent("ReadOnlyResourceDataSet");
   index = 0;
   while (index < readonly_resource_data_set.getChildCount()) {
      resource_ids[i] = XValidator.choiceID(readonly_resource_data_set.getChild(index).getStringValue());
      i++;
      index++;
   }
   openResourceChooser("MainFrame", "addProjectResourceOk", resource_ids, true, false, true);
}

function removeProjectAssignment(event){
   form = XDisplay.getActiveForm();
   assigned_resource_data_set = form.findComponent("AssignedResourceDataSet");
   selected_rows = assigned_resource_data_set.selectedRows();
   if (selected_rows.size() > 0) {
      assigned_resource_data_set.removeDataRows(selected_rows);
      resourceTable = form.findComponent("ResourcesTable");
      resourceTable.update();
   }
}

function selectionChanged(event) {

   form = XDisplay.getActiveForm();
   version_number = form.findComponent("WorkingVersionNumber");
   version_set = form.findComponent("VersionsSet");
   selected_rows = version_set.selectedRows();

   delete_button = form.findComponent("RemoveVersionButton");
   delete_button.setEnabled(true);

   can_delete = true;
   //determine if the working version is among the selected ones
   if (selected_rows.size() > 0) {
      
      i = 0;
      while (i < selected_rows.size()) {
         if (selected_rows[i].getChild(0).getStringValue() == version_number.getStringValue()) {
            can_delete = false;
            break;
         }
         i++;
      }
   }

   if (!can_delete) {
      delete_button = form.findComponent("RemoveVersionButton");
      delete_button.setEnabled(can_delete);
   }
   form.repaint();
}

function checkAdjust(event) {
   adjustCell = event.event_source;
   isChecked = adjustCell.getBooleanValue();
   hourlyRateCell = adjustCell.getParent().getChild(3);
   externalRateCell = adjustCell.getParent().getChild(4);
   resourceID = adjustCell.getParent().getStringValue();

   hourlyRateCell.setEnabled(isChecked);
   externalRateCell.setEnabled(isChecked);
   if (isChecked == true) {
      request = new XMessage;
      request.setAction("ResourceService.getResourceRates");
      request.setArgument("resource_id",resourceID);
      response = XDisplay.getClient().invokeMethod(request);
      internalRate = response.getArgument("InternalRate");
      externalRate = response.getArgument("ExternalRate");
      hourlyRateCell.setDoubleValue(internalRate);
      externalRateCell.setDoubleValue(externalRate);
   }
   else {
      hourlyRateCell.setValue(null);
      externalRateCell.setValue(null);
   }
   // Update resource table
   resourceTable = XDisplay.getActiveForm().findComponent("ResourcesTable");
   resourceTable.doLayout();
   resourceTable.repaint();
}

