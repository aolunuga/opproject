/*
 * Copyright(c) OnePoint Software GmbH 2006. All Rights Reserved.
 */
require "onepoint/project/scripts/error.jes";

import onepoint.express.XDisplay;
import onepoint.express.XComponent;
import onepoint.service.XMessage;

/**
 * Gets the list of selected ids from the form.
 */
function getSelectedReportIds() {
   form = XDisplay.findFrame("MainFrame").currentForm();
   reportArchiveSet = form.findComponent("ReportArchiveDataSet");
   selectedRows = reportArchiveSet.selectedRows();
   i = 0;
   while (i < selectedRows.size()) {
      dataRow = selectedRows[i];
      reportId = dataRow.getChild(0).getStringValue();
      reportIds[i] = reportId;
      i++;
   }
   return reportIds;
}

function info(event) {
   form = XDisplay.findFrame("MainFrame").currentForm();

   reportIds = getSelectedReportIds();
   if (reportIds == null) {
      return;
   }

   //get the first selected report
   reportId = reportIds[0];

   //currently edit mode is not possible
   parameters.editMode = false;
   parameters.reportId = reportId;

   dialog = XComponent.newDialog();
   dialogForm = dialog.loadForm("/team/modules/report_archive/forms/edit_report.oxf.xml", parameters);

   caption = dialogForm.findComponent("InfoCaption").getText();
   if (editMode == true) {
      caption = dialogForm.findComponent("EditCaption").getText();
   }
   dialog.setText(caption);
   dialog.open();
}

function delete(event) {
   reportIds = getSelectedReportIds();
   if (reportIds != null) {
      parameters.selectedIds = reportIds;
      dialog = XComponent.newDialog();
      dialog.open("/team/modules/report_archive/forms/confirm_report_delete.oxf.xml", parameters);
   }
}

function open(event) {
   dataCell = event.event_source;
   //the id of the report which was double-clicked
   reportIds[0] = dataCell.getParent().getChild(0).getStringValue();
   if (reportIds != null) {
      form = XDisplay.getActiveForm();

      request = new XMessage;
      request.setAction("ReportArchiveService.prepareReportOpening");
      request.setArgument("reportIds", reportIds);
      response = XDisplay.getClient().invokeMethod(request);

      if (handleError(form, response, "ErrorLabel") == true) {
         reportUrls = response.getArgument("reportUrls");
         contentIds = response.getArgument("contentIds");

         i = 0;
         if (contentIds != null) {
            while (i < contentIds.size()) {
               reportUrl = reportUrls[i];
               contentId = contentIds[i];
               XDisplay.showDocument(reportUrl, contentId);
               i++;
            }
         }
         else {
            while (i < reportUrls.size()) {
               url = reportUrls[i];
               if (url != null) {
                  XDisplay.showDocument(url, null);
               }
               i++;
            }
         }
      }
   }
}

function filterReports(event) {
   reportTypeButton = event.event_source;
   /*params for refreshing archive form */
   params.report_type_locator = reportTypeButton.getStringValue();
   frame = XDisplay.findFrame("MainFrame");
   frame.refreshForm(params);
}

function selectionChanged(event) {
   //project form
   form = XDisplay.getActiveForm();
   //toolbar
   toolbar = form.findComponent("ReportsToolBar");
   //toolbar delete button
   deleteButton = form.findComponent("DeleteTool");
   deleteButton.setEnabled(true);
   infoButton = form.findComponent("InfoTool");
   infoButton.setEnabled(true);

   managerPermission = form.findComponent("ManagerPermission").getByteValue();
   tableRow = event.event_source;
   dataRow = tableRow.getDataComponent();
   if (dataRow != null) {
      effectiveProjectNodePermission = dataRow.getChild(5).getByteValue();
      if (effectiveProjectNodePermission < managerPermission) {
         deleteButton.setEnabled(false);
      }
   }

   //toolbar
   toolbar.doLayout();
   toolbar.repaint();
}