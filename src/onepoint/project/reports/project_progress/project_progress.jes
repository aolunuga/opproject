/*
 * Copyright(c) OnePoint Software GmbH 2007. All Rights Reserved.
 */

// Reporting script for project_progress.oxf.xml

require "onepoint/project/modules/project/scripts/open_project_chooser.jes";

import onepoint.express.XDisplay;
import onepoint.express.XValidator;
import onepoint.service.XMessage;

function chooseProject(event) {
   openProjectChooser("QueryFrame", null, "ProjectLocatorField", "ProjectNameField", true, false, false, null, false);
}

function runQuery() {
   form = XDisplay.findFrame("QueryFrame").currentForm();
   // *** Refresh form w/data-fields as parameters and a special boolean parameter runQuery=true
   choice = form.findComponent("ProjectLocatorField").getStringValue();
   project = form.findComponent("ProjectNameField").getStringValue();
   if (choice != null && project != null) {
      parameters.RunQuery = true;
      parameters.ProjectLocator = XValidator.choiceID(choice);
      XDisplay.findFrame("QueryFrame").refreshForm(parameters);
   }
}

/**
 * Creates a request that will be invoked when executing this report.
 */
function createRequest() {
   form = XDisplay.findFrame("QueryFrame").currentForm();
   choice = form.findComponent("ProjectLocatorField").getStringValue();
   project = form.findComponent("ProjectNameField").getStringValue();
   errorLabel = form.findComponent("ErrorLabel");

   if (choice != null && project != null) {
      if (errorLabel.getVisible()) {
         errorLabel.setVisible(false);
         form.doLayout();
         form.repaint();
      }

      //important: as we can only have one "mainfile" in a jar, we refer here to the jar!!!
      name = "projectprogress.jar";
      //report parameters
      parameters.DayWorkTime = "8";
      //report formats
      formats[0] = "PDF";

      request = new XMessage;
      request.setArgument("name", name);
      request.setArgument("parameters", parameters);
      request.setArgument("formats", formats);

      return request;
   }
   else {
      errorLabel.setVisible(true);
      form.doLayout();
      form.repaint();
      return null;
   }
}

function prepareForm(event){
   button = XDisplay.findFrame("QueryFrame").getForm().findComponent("PrintButton");
   dataSet = XDisplay.findFrame("QueryFrame").currentForm().findComponent("ResultSet");
   if (dataSet.getChildCount() > 0) {
      button.setEnabled(true);
   }
   else {
      button.setEnabled(false);
   }
   button.update();
   button = XDisplay.findFrame("QueryFrame").getForm().findComponent("RunQueryButton");
   button.setEnabled(true);
   button.update();
   button = XDisplay.findFrame("QueryFrame").getForm().findComponent("ResetQueryButton");
   button.setEnabled(true);
   button.update();
}

function saveTableCSV(event){
   XDisplay.getActiveForm().findComponent("ResultTable").saveAsCSV("Save Project Progress");
}

function saveTableImage(event) {
   XDisplay.getActiveForm().findComponent("ResultTable").saveAsImage("Save Project Progress");
}

/**
 * Returns a query that will be used to fill up the report.
 */
function getReportQuery() {
   form = XDisplay.findFrame("QueryFrame").currentForm();
   projectLocator = form.findComponent("ProjectLocatorField").getStringValue();
   project = form.findComponent("ProjectNameField").getStringValue();
   projectsWithBaseline = form.findComponent("ProjectsWithBaseline").getValue();
   if (projectLocator != null && project != null) {
      projectId = XValidator.choiceID(projectLocator);
      baselineId = projectsWithBaseline.get(projectLocator);
      if (baselineId != null) {
         return getReportQueryWithBaseline(projectId, baselineId);
      }
      else {
         return getReportQueryWithoutBaseline(projectId);
      }
   }
   return null;
}

/**
 * Returns the report query when the selected project doesn't have a baseline.
 */
function getReportQueryWithoutBaseline(projectId) {
   selectClause = "select a.Name, a.OutlineLevel, a.Start, a.Finish, a.Duration, a.Complete, a.BaseEffort, a.BasePersonnelCosts, a.ActualEffort, a.ActualPersonnelCosts, a.Type, current_timestamp()";
   fromClause = " from OpActivity a inner join a.ProjectPlan p inner join p.ProjectNode node";
   whereClause = " where node.Archived=false and node.ID = ? and a.Deleted = false and a.Type != 3 and a.Type != 4 and a.Type != 6 order by a.Sequence";

   queryString = selectClause + fromClause + whereClause;
   Console.println("Project progress query (without baseline) :" + queryString);
   query.queryString = queryString;
   query.queryParams[0] = projectId;

   return query;
}

/**
 * Returns the report query when the selected project doesn't have a baseline.
 */
function getReportQueryWithBaseline(projectId, baselineId) {
   selectClause = "select a.Name, a.OutlineLevel, a.Start, a.Finish, a.Duration, a.Complete, av.BaseEffort, av.BasePersonnelCosts, a.ActualEffort, a.ActualPersonnelCosts, a.Type, current_timestamp()";
   fromClause = " from OpActivity a inner join a.ProjectPlan p inner join p.ProjectNode node inner join a.Versions av inner join av.PlanVersion planVersion";
   whereClause = " where node.Archived=false and node.ID = ? and planVersion.ID = ? and a.Deleted = false and a.Type != 3 and a.Type != 4 and a.Type != 6 order by a.Sequence";

   queryString = selectClause + fromClause + whereClause;
   Console.println("Project progress query (with baseline) :" + queryString);
   query.queryString = queryString;
   query.queryParams[0] = projectId;
   query.queryParams[1] = baselineId;

   return query;
}

/**
 * Returns a map of [reportFieldName, reportFieldIndex] pairs that indicated how the fields from the report map to the
 * result of the query.
 */
function getReportFields() {
   result.op_name = 0;
   result.op_outlinelevel = 1;
   result.op_start = 2;
   result.op_finish = 3;
   result.op_duration = 4;
   result.op_complete = 5;
   result.op_baseeffort = 6;
   result.op_basepersonnelcosts = 7;
   result.op_actualeffort = 8;
   result.op_actualpersonnelcosts = 9;
   result.op_type = 10;
   result.HEUTE = 11;

   return result;
}

function getResourceMapId() {
   return null;
}
