/*
 * Copyright(c) OnePoint Software GmbH 2007. All Rights Reserved.
 */
require "onepoint/project/modules/project/scripts/open_project_chooser.jes";
require "onepoint/project/scripts/error.jes";
require "onepoint/project/scripts/lazyLoad.jes";
require "onepoint/project/scripts/saveImage.jes";

import onepoint.service.XMessage;
import onepoint.express.XDisplay;
import onepoint.express.XComponent;
import onepoint.express.XExtendedComponent;
import onepoint.express.XValidator;

function newPortfolio(event) {
   // Check if portfolio is selected
   project_data_set = XDisplay.getActiveForm().findComponent("ProjectDataSet");
   selected_rows = project_data_set.selectedRows();
   if (selected_rows.size() > 0) {
      descriptor = selected_rows[0].getChild(0).getStringValue();
      is_portfolio = descriptor.equals("f");
      if (is_portfolio) {
         parameters.super_portfolio_id = selected_rows[0].getStringValue();
         parameters.super_portfolio_index = selected_rows[0].getIndex();
      }
   }

   dialog = XComponent.newDialog();
   dialog.open("/modules/project/forms/new_portfolio.oxf.xml", parameters);
}

function getNewProjectParameters() {
   parameters = null;
   // Check if portfolio is selected
   project_data_set = XDisplay.getActiveForm().findComponent("ProjectDataSet");
   selected_rows = project_data_set.selectedRows();
   if (selected_rows.size() > 0) {
      descriptor = selected_rows[0].getChild(0).getStringValue();
      is_portfolio = descriptor.equals("f");
      if (is_portfolio) {
         parameters.portfolio_id = selected_rows[0].getStringValue();
         parameters.portfolio_index = selected_rows[0].getIndex();
      }
   }
   return parameters;
}

/**
 * @IsOverridden
 */
function newProject(event) {
   parameters = getNewProjectParameters();
   dialog = XComponent.newDialog();
   dialog.open("/modules/project/forms/new_project.oxf.xml", parameters);
}

function move(event) {
   // Check if a project/portfolio is selected
   project_data_set = XDisplay.getActiveForm().findComponent("ProjectDataSet");
   selected_rows = project_data_set.selectedRows();
   if (selected_rows.size() > 0) {
      notSelectableIds = new ArrayList;
      i = 0;
      while (i < selected_rows.size()) {
         row = selected_rows[i];
         id = XValidator.choiceID(row.getStringValue());
         notSelectableIds.add(id);
         i++;
      }
      openProjectChooser("MainFrame", "moveOk", null, null, false, true, false, null, false, notSelectableIds);
   }
}

function moveOk(portfolioChoice) {
   portfolioId = XValidator.choiceID(portfolioChoice);

   resource_data_set = XDisplay.findFrame("MainFrame").currentForm().findComponent("ProjectDataSet");
   selected_rows = resource_data_set.selectedRows();

   projectNodeIds = getPortfolioIds(selected_rows);
   projectsAndTemplatesIds = getProjectsAndTemplatesIds(selected_rows, projectNodeIds);
   projectNodeIds.addAll(projectsAndTemplatesIds);

   request = new XMessage;
   request.setAction("ProjectService.moveProjectNode");
   request.setArgument("project_ids", projectNodeIds);
   request.setArgument("portfolio_id", portfolioId);
   response = XDisplay.getClient().invokeMethod(request);

   if (response.getError() != null) {
      showWarning(response, true, "MainFrame", "refreshForm", null);
   }
   else {
      refreshForm();
   }
}

function refreshForm() {
   XDisplay.findFrame("MainFrame").refreshForm();
}


/**
 * Gets all the portfolios from a list of selected rows.
 */
function getPortfolioIds(selectedRows) {
   result = new ArrayList;
   rowsList = new ArrayList;
   i = 0;
   while (i < selectedRows.size()) {
      selectedRow = selectedRows[i];
      descriptor = selectedRow.getChild(0).getStringValue();
      isPortfolio = descriptor.equals("f");
      if (isPortfolio) {
         currentId = selectedRow.getStringValue();

         //make sure none of the children of the given pool are selected
         childrenIds = getChildrenIds(selectedRow);
         j = 0;
         while (j < childrenIds.size()) {
            childId = childrenIds[j];
            if (result.contains(childId)) {
               result.remove(childId);
            }
            j++;
         }
         result.add(currentId);

         //if any of the parents of the given row is selected, remove the current row
         parentIds = getParentIds(selectedRow);
         j = 0;
         while (j < parentIds.size()) {
            parentId = parentIds[j];
            if (result.contains(parentId)) {
               result.remove(currentId);
               //break
               j = parentIds.size();
            }
            else {
               j++;
            }
         }
      }
      i++;
   }

   return result;
}

/**
 * Returns a list of projects and template ids whose parent portfolios aren't found among the given list of portfolios.
 */
function getProjectsAndTemplatesIds(selectedRows, portfolioIds) {
   result = new ArrayList;
   i = 0;
   while (i < selectedRows.size()) {
      selectedRow = selectedRows[i];
      descriptor = selectedRow.getChild(0).getStringValue();
      isProject = descriptor.equals("t");
      isTemplate = descriptor.equals("p");
      if (isProject || isTemplate) {
         parentIds = getParentIds(selectedRow);
         foundAmongstPortfolios = false;
         j = 0;
         while (j < parentIds.size()) {
            portfolioId = parentIds[j];
            if (portfolioIds.contains(portfolioId)) {
               foundAmongstPortfolios = true;
               //some sort of break....
               j = parentIds.size();
            }
            else {
               j++;
            }
         }
         if (!foundAmongstPortfolios) {
            result.add(selectedRow.getStringValue());
         }
      }
      i++;
   }
   return result;
}

/**
 * Returns a List<String> with all the ids (recursively) of the parents of a data-row inside a data-set.
 */
function getParentIds(row) {
   result = new ArrayList;
   parentRow = row.getParentInDataSet();
   while (parentRow.getOutlineLevel() > 0) {
      result.add(parentRow.getStringValue());
      parentRow = parentRow.getParentInDataSet();
   }
   result.add(parentRow.getStringValue());
   return result;
}

/**
 * Returns a List<String> with all the ids of the children of the given row
 */
function getChildrenIds(row) {
   result = new ArrayList;
   i = 0;
   subRows = row.getSubRows();
   while (i < subRows.size()) {
      result.add(subRows[i].getStringValue());
      i++;
   }
   return result;
}

function editPortfolio(portfolioId, editMode) {
   parameters.edit_mode = editMode;
   parameters.portfolio_id = portfolioId;
   dialog = XComponent.newDialog();
   dialog.open("/modules/project/forms/edit_portfolio.oxf.xml", parameters);
}

/**
 * @IsOverridden
 */
function editProject(projectId, editMode) {
   parameters.edit_mode = editMode;
   parameters.project_id = projectId;
   dialog = XComponent.newDialog();
   dialog.open("/modules/project/forms/edit_project.oxf.xml", parameters);
}

function viewProject(event) {
   project_data_set = XDisplay.getActiveForm().findComponent("ProjectDataSet");
   selected_rows = project_data_set.selectedRows();
   if (selected_rows.size() > 0) {
      descriptor = selected_rows[0].getChild(0).getStringValue();

      if (descriptor.equals("p")) {
         editProject(selected_rows[0].getStringValue(), false);
      }
   }
}

function timeUnitChanged(event) {
   // *** Get current choice from choice-field
   choice_field = XDisplay.getActiveForm().findComponent("TimeUnitChooser");
   choice_id = XValidator.choiceID(choice_field.getStringValue());
   // *** Find component gantt-box via ID
   gantt_box = XDisplay.getActiveForm().findComponent("ProjectGanttChart");
   // *** Invoke setTimeUnit(time_unit) on gantt-box
   if (choice_id.equals("d")) {
      gantt_box.setTimeUnit(2);
      // XCalendar.DAYS;
   }
   if (choice_id.equals("w")) {
      gantt_box.setTimeUnit(3);
      // XCalendar.WEEKS;
   }
   if (choice_id.equals("m")) {
      gantt_box.setTimeUnit(4);
      // XCalendar.MONTHS;
   }

   gantt_box.resetCalendar();
   gantt_box.doLayout();
   gantt_box.repaint();
}

function saveGanttImage(event) {
   saveAsImage(XDisplay.getActiveForm().findComponent("ProjectGanttChart"), "Save Gantt");
}

/**
 * @IsOverridden
 */
function edit(event) {
   project_data_set = XDisplay.getActiveForm().findComponent("ProjectDataSet");
   selected_rows = project_data_set.selectedRows();
   if (selected_rows.size() > 0) {
      descriptor = selected_rows[0].getChild(0).getStringValue();

      is_portfolio = descriptor.equals("f");
      is_project = descriptor.equals("p");

      if (is_portfolio) {
         editPortfolio(selected_rows[0].getStringValue(), true);
      }

      if (is_project) {
         editProject(selected_rows[0].getStringValue(), true);
      }
   }
}

/**
 * @IsOverridden
 */
function delete(event) {
   project_data_set = XDisplay.getActiveForm().findComponent("ProjectDataSet");
   selected_rows = project_data_set.selectedRows();
   if (selected_rows.size() > 0) {
      parameters.rows = selected_rows;
      dialog = XComponent.newDialog();
      dialog.open("/modules/project/forms/confirm_project_delete.oxf.xml", parameters);
   }
}

/**
 * @IsOverridden
 */
function selectionChanged(event) {
   tableRow = event.event_source;
   dataRow = tableRow.getDataComponent();
   updateToolBar(dataRow);
}

/**
 * @IsOverridden
 */
function updateToolBar(dataRow) {
   updateBar(dataRow);
}

/**
 * Updates the tool bar.
 * 
 * @param dataRow
 */
function updateBar(dataRow) {
   //project form
   form = XDisplay.getActiveForm();
   //toolbar
   toolbar = form.findComponent("ProjectToolbar");

   //toolbar buttons
   newProjectButton = form.findComponent("NewProjectButton");
   newProjectButton.setEnabled(true);
   newPortfolioButton = form.findComponent("NewPortfolioButton");
   newPortfolioButton.setEnabled(true);
   infoButton = form.findComponent("InfoButton");
   infoButton.setEnabled(true);
   moveButton = form.findComponent("MoveButton");
   moveButton.setEnabled(true);
   deleteButton = form.findComponent("DeleteButton");
   deleteButton.setEnabled(true);

   //permissions
   rootPortfolioPermission = form.findComponent("RootPortfolioPermission").getByteValue();
   managerPermission = form.findComponent("ManagerPermission").getByteValue();

   if (dataRow != null) {
      descriptor = dataRow.getChild(0).getStringValue();
      effectiveProjectNodePermission = dataRow.getChild(5).getByteValue();
      if (descriptor.equals("f")) {
         //portfolio was selected
         if (effectiveProjectNodePermission < managerPermission) {
            //the user isn't at least manager on the selected node
            newProjectButton.setEnabled(false);
            newPortfolioButton.setEnabled(false);
         }
      }
      else {
         //project was selected
         if (rootPortfolioPermission < managerPermission) {
            //the user isn't at least manager on the root portfolio
            newProjectButton.setEnabled(false);
            newPortfolioButton.setEnabled(false);
         }
      }

      //these buttons apply to all types of project nodes
      if (effectiveProjectNodePermission < managerPermission) {
         //the user isn't at least manager on the selected node
         moveButton.setEnabled(false);
      }

      //for the delete button we must also check parent permissions
      parentRow = dataRow.getParentInDataSet();
      effectiveParentPermission = parentRow.getChild(5).getByteValue();
      if (effectiveParentPermission < managerPermission) {
         deleteButton.setEnabled(false);
      }

      //disable move and delete buttons in case of root project portofolio selection
      if (XValidator.choiceCaption(dataRow.getChild(1).getStringValue()).equals("Root Project Portfolio")) {
         moveButton.setEnabled(false);
         deleteButton.setEnabled(false);
      }
   }
   toolbar.doLayout();
   toolbar.repaint();
}


function addProjectResourceOk(selectedResources) {
   dialog = XDisplay.getActiveForm();
   dataSet = dialog.findComponent("AssignedResourceDataSet");
   i = 0;
   while (i < selectedResources.size()) {
      resource_id = selectedResources[i];
      data_row = dataSet.newDataRow();
      data_row.setStringValue(resource_id.getStringValue());
      dataSet.addDataRow(data_row);
      i++;
   }
   request = new XMessage;
   request.setAction("ResourceService.addDescriptionToResources");
   request.setArgument("ResourcesDataSet", dataSet);
   response = XDisplay.getClient().invokeMethod(request);
   dataSetService = response.getArgument("ResourcesDataSet");
   dataSet.removeAllChildren();
   i = 0;
   while (i < dataSetService.getChildCount()) {
      row = dataSetService.getChild(i);
      dataRow = dataSet.newDataRow();
      dataRow.setStringValue(row.getStringValue());
      dataRow.setOutlineLevel(row.getOutlineLevel());
      dataRow.setFiltered(row.getFiltered());
      dataRow.setExpanded(row.getExpanded());
      dataSet.addDataRow(dataRow);
      j = 0;
      while (j < row.getChildCount()) {
         dataCell = XComponent.newDataCell();
         dataCell.setEnabled(row.getChild(j).getEnabled());
         if (row.getChild(j).getValue() != null) {
            dataCell.setValue(row.getChild(j).getValue());
         }
         dataRow.addChild(dataCell);
         j++;
      }
      i++;
   }
   resourceTable = dialog.findComponent("ResourcesTable");
   resourceTable.update();
}

function retrieveChildren(event) {
   // Console.println("#1");
   dataRow = event.expand_source;

   request = new XMessage;
   request.setAction("ProjectService.expandProjectNode");
   request.setArgument("project_row", dataRow);

   // Console.println("#2");
   children = expandNode(dataRow, 24, request);

   // Console.println("#3");
   if (children != null) {
      //used for advanced functionality
      // Console.println("#4");
      manageDetailsSet(children, dataRow);
      // Console.println("#5");
   }
}

//do nothing
function manageDetailsSet(children, dataRow) {
}

function tabChanged(event) {
   //project form
   form = XDisplay.getActiveForm();
   //toolbar
   toolbar = form.findComponent("ProjectToolbar");

   //permissions
   rootPortfolioPermission = form.findComponent("RootPortfolioPermission").getByteValue();
   managerPermission = form.findComponent("ManagerPermission").getByteValue();
   
   //toolbar buttons
   newProjectButton = form.findComponent("NewProjectButton");
   newPortfolioButton = form.findComponent("NewPortfolioButton");

   if (rootPortfolioPermission < managerPermission) {
      newProjectButton.setEnabled(false);
      newPortfolioButton.setEnabled(false);
   }
   else {
      newProjectButton.setEnabled(true);
      newPortfolioButton.setEnabled(true);
   }
   infoButton = form.findComponent("InfoButton");
   infoButton.setEnabled(false);
   moveButton = form.findComponent("MoveButton");
   moveButton.setEnabled(false);
   deleteButton = form.findComponent("DeleteButton");
   deleteButton.setEnabled(false);

   toolbar.doLayout();
   toolbar.repaint();
}

function getActiveTableComponent() {
   tabBox = XDisplay.getActiveForm().findComponent("MyTabBox");
   cur_tab = tabBox.getIntValue();
   tab = tabBox.getChild(cur_tab + 1);
   return tab.getChild(0);
}

function saveTableCSV(event) {
   projectsTable = getActiveTableComponent();
   dataSet = getActiveTableComponent().getDataSetComponent();

   //determine all the rows which have as children dummy rows
   unexpandedNodes = new HashMap;
   dummyExists = false;
   i = 0;
   while (i < dataSet.getChildCount()) {
      dataRow = dataSet.getChild(i);
      if (dataRow.getStringValue().equals("DummyChildId")) {
         //based on the fact that the root row cannot be a dummy row i-1 should always be >=0
         j = i - 1;
         parentRow = dataSet.getChild(j);
         unexpandedNodes.put(parentRow.getStringValue(), parentRow.getOutlineLevel());
         dummyExists = true;
      }
      i++;
   }

   if (dummyExists) {
      request = new XMessage;
      request.setArgument("unexpandedNodes", unexpandedNodes);
      request.setAction("ProjectService.loadAllRows");
      response = XDisplay.getClient().invokeMethod(request);
      responseMap = response.getArgument("unexpandedNodes");

      //add the new data rows into the data set at the correct indexes and remove the dummy rows
      i = 0;
      while (i < dataSet.getChildCount()) {
         dataRow = dataSet.getChild(i);
         if (responseMap.get(dataRow.getStringValue()) != null) {

            //remove the dummy child of this row
            dummyRow = dataSet.getChild(dataRow.getIndex() + 1);
            dataSet.removeChild(dummyRow);

            rowsList = responseMap.get(dataRow.getStringValue());
            j = 0;
            while (j < rowsList.size()) {
               listRow = rowsList.get(j);
               dataSet.addChild(listRow, dataRow.getIndex() + j + 1);
               j++;
            }

            //mark this node as expanded
            expandedDataCell = XComponent.newDataCell();
            expandedDataCell.setBooleanValue(true);
            dataRow.addChild(expandedDataCell);
         }
         i++;
      }
      projectsTable.update();
   }
   projectsTable.saveAsCSV("Save My Projects");
}

function saveTableImage(event) {
   saveAsImage(getActiveTableComponent(), "Save My Projects");
}
