/*
 * Copyright(c) OnePoint Software GmbH 2006. All Rights Reserved.
 */

// Reusable action handling script for permissions tab

require "onepoint/project/modules/user/scripts/open_subject_chooser.jes";

import onepoint.express.XDisplay;
import onepoint.express.XComponent;

function addSubject(event) {
   // Open subject chooser and add subject to permission set
   // (Note: Needs callback when subject was choosen by chooser, e.g., "addSelectedSubject")
   Console.println("==> addSubject");
   openSubjectChooser(XDisplay.getActiveWindow().getID(), "addSelectedSubject", true, true, null, true, null);
   XDisplay.findFrame("MainFrame").repaint();
}

function addSelectedSubject(subjectList) {
   // Called by subject chooser
   // TODO: Check for user (licensed/maximum) access level

   // *** Check for selected role; if a role is selected: Add there at the end of user "list"
   // ==> Otherwise, simply add to default/standard role (important: Visualize default in role caption)

   i = 0;
   while (i < subjectList.size()) {
      subject = subjectList[i];
      i++;

      form = XDisplay.getActiveForm();
      permissionSet = form.findComponent("PermissionSet");

      // "Copy" subject row (just to be on the safe side)
      permissionRow = permissionSet.newDataRow();
      permissionRow.setOutlineLevel(1);
      permissionRow.setStringValue(subject);

      // TODO: Check if first selection has an outline-level == 0 (else ignore)
      // (If yes: Use appendToSuperRow in order to add permission row)
      selectedRows = permissionSet.selectedRows();
      hasSelectedRow = false;
      if (selectedRows.size() > 0) {
         selectedRow = selectedRows[0];
         if (selectedRow.getOutlineLevel() == 0) {
            hasSelectedRow = true;
         }
      }

      if (hasSelectedRow) {
         rows[0] = permissionRow;
         appendToSuperRow(permissionSet, selectedRow, rows, 1);
      }
      if (!hasSelectedRow) {
         permissionSet.addChild(permissionRow);
      }
   }

   form.findComponent("PermissionTree").update();
}

function removeSubject(event) {
   form = XDisplay.getActiveForm();
   permissionSet = form.findComponent("PermissionSet");
   selectedRows = permissionSet.selectedRows();
   if (selectedRows.size() > 0) {
      i = 0;
      j = 0;
      while (i < selectedRows.size()) {
         row = selectedRows[i];
         if (row.getOutlineLevel() > 0) {
            rowsToRemove[j] = row;
            j++;
         }
         i++;
      }
      if (j > 0) {
         permissionSet.removeDataRows(rowsToRemove);
      }
      XDisplay.getActiveForm().findComponent("PermissionTree").update();
   }

}

function moveSubjectUp(event) {
   // Move selected subject(s) one access level up (promote user or group)
   // TODO: Check for user (licensed/maximum) access level

   form = XDisplay.getActiveForm();
   permissionSet = form.findComponent("PermissionSet");
   selectedRows = permissionSet.selectedRows();
   if (selectedRows.size() == 0) {
      return;
   }

   // Count contigous rows w/outline-level one (1)
   contigousRowCount = countContigousRows(selectedRows);
   if (contigousRowCount == 0) {
      return;
   }

   // Check for previous super row
   previousSuperRowIndex = previousSuperRowIndex(permissionSet, selectedRows[0]);
   if (previousSuperRowIndex == -1) {
      return;
   }

   // Remove first contigously selected rows
   removeRows(permissionSet, selectedRows, contigousRowCount);

   // Append to sub-rows of previous super row
   previousSuperRow = permissionSet.getChild(previousSuperRowIndex);
   appendToSuperRow(permissionSet, previousSuperRow, selectedRows, contigousRowCount);

   form.findComponent("PermissionTree").update();

}

function moveSubjectDown(event) {

   form = XDisplay.getActiveForm();
   permissionSet = form.findComponent("PermissionSet");
   selectedRows = permissionSet.selectedRows();
   if (selectedRows.size() == 0) {
      return;
   }

   // Count contigous rows w/outline-level one (1)
   contigousRowCount = countContigousRows(selectedRows);
   if (contigousRowCount == 0) {
      return;
   }

   // Check for next super row
   nextSuperRowIndex = nextSuperRowIndex(permissionSet, selectedRows[0]);
   if (nextSuperRowIndex == -1) {
      return;
   }

   // Correct next super row index by subtracting contigous row count
   nextSuperRowIndex = nextSuperRowIndex - contigousRowCount;

   // Remove first contigously selected rows
   removeRows(permissionSet, selectedRows, contigousRowCount);

   // Append to sub-rows of next super row
   nextSuperRow = permissionSet.getChild(nextSuperRowIndex);
   appendToSuperRow(permissionSet, nextSuperRow, selectedRows, contigousRowCount);

   form.findComponent("PermissionTree").update();

}

function countContigousRows(rows) {
   // Count first contigous rows w/an outline-level of one (1)
   c = 0;
   previousIndex = -1;
   while (c < rows.size()) {
      row = rows[c];
      if (row.getOutlineLevel() != 1) {
         return c;
      }
      if (previousIndex != -1) {
         if (previousIndex != row.getIndex() - 1) {
            return c;
         }
      }
      c++;
   }
   return c;
}

function superRowIndex(dataSet, row) {
   superOutlineLevel = row.getOutlineLevel() - 1;
   if (superOutlineLevel >= 0) {
      i = row.getIndex() - 1;
      while (i >= 0) {
         if (dataSet.getChild(i).getOutlineLevel() == superOutlineLevel) {
            return i;
         }
         i--;
      }
   }
   return -1;
}

function previousSuperRowIndex(dataSet, row) {

   superRowIndex = superRowIndex(dataSet, row);
   if (superRowIndex == -1) {
      return -1;
   }

   superOutlineLevel = row.getOutlineLevel() - 1;
   i = superRowIndex - 1;
   while (i >= 0) {
      if (dataSet.getChild(i).getOutlineLevel() == superOutlineLevel) {
         return i;
      }
      i--;
   }

   return -1;

}

function nextSuperRowIndex(dataSet, row) {

   superRowIndex = superRowIndex(dataSet, row);
   Console.println("nextSRI -- superRowIndex");
   Console.println(superRowIndex);
   if (superRowIndex == -1) {
      return -1;
   }

   superOutlineLevel = row.getOutlineLevel() - 1;
   i = superRowIndex + 1;
   while (i < dataSet.getChildCount()) {
      if (dataSet.getChild(i).getOutlineLevel() == superOutlineLevel) {
         return i;
      }
      i++;
   }

   return -1;

}

function removeRows(dataSet, rows, count) {
   i = 0;
   while (i < count) {
      rowsToRemove[i] = rows[i];
      i++;
   }
   dataSet.removeDataRows(rowsToRemove);
}

function appendToSuperRow(dataSet, superRow, rows, count) {

   Console.println("==>appendToSuperRow");

   // Find append position
   subOutlineLevel = superRow.getOutlineLevel() + 1;
   i = superRow.getIndex() + 1;
   appendPosition = -1;
   while (i < dataSet.getChildCount()) {
      if (appendPosition == -1) {
         if (dataSet.getChild(i).getOutlineLevel() < subOutlineLevel) {
            appendPosition = i;
         }
      }
      i++;
   }
   if (appendPosition == -1) {
      appendPosition = dataSet.getChildCount();
   }

   // Append rows to super row
   i = 0;
   while (i < count) {
      Console.println("---appendToSuperRow...");
      Console.println(appendPosition);
      dataSet.addDataRow(appendPosition, rows[i]);
      appendPosition++;
      i++;
   }

   Console.println("==>/appendToSuperRow");

}

