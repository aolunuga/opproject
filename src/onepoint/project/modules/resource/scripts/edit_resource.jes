/*
 * Copyright(c) OnePoint Software GmbH 2007. All Rights Reserved.
 */

// Controller script for edit_resource.oxf.xml

require "onepoint/project/scripts/error.jes";
require "onepoint/project/modules/user/scripts/permissions_tab.jes";
require "onepoint/project/modules/user/scripts/open_subject_chooser.jes";
require "onepoint/project/modules/project/scripts/open_project_chooser.jes";
require "onepoint/project/modules/resource/scripts/hourly_rates.jes";

import onepoint.express.XDisplay;
import onepoint.express.XComponent;
import onepoint.service.XMessage;
import onepoint.express.XValidator;

function ok(event) {
   form = XDisplay.getActiveForm();
   edit_mode = form.findComponent("EditMode").getBooleanValue();
   if (edit_mode) {
      ok_edit(event);
   } else {
      cancel(event);
   }
}

function ok_edit(event) {
   // Gather resource-data
   form = XDisplay.getActiveForm();
   resource_id = form.findComponent("ResourceID").getStringValue();
   resource_data.Name = form.findComponent("Name").getStringValue();
   resource_data.Description = form.findComponent("Description").getStringValue();
   available = form.findComponent("Available").getDoubleValue();
   resource_data.Available = available;
   hourlyRate = form.findComponent("HourlyRate").getDoubleValue();
   resource_data.HourlyRate = hourlyRate;
   externalRate = form.findComponent("ExternalRate").getDoubleValue();
   resource_data.ExternalRate = externalRate;
   inheritFromPoolRate = !form.findComponent("InheritPoolRate").getBooleanValue();
   resource_data.InheritPoolRate = inheritFromPoolRate;
   originalInherit = !form.findComponent("OriginalInherit").getBooleanValue();
   hourlyRatesSet = form.findComponent("HourlyRatesSet");
   resource_data.HourlyRatesSet = hourlyRatesSet;
   userChoice = form.findComponent("UserName").getStringValue();
   if (userChoice != null) {
      resource_data.UserID = XValidator.choiceID(userChoice);
   }
   else {
      resource_data.UserID = null;
   }

   assigned_project_data_set = form.findComponent("AssignedProjectDataSet");
   i = 0;
   while (i < assigned_project_data_set.getChildCount()) {
      assigned_projects[i] = assigned_project_data_set.getChild(i).getStringValue();
      i++;
   }
   resource_data.Projects = assigned_projects;

   resource_data.PermissionSet = form.findComponent("PermissionSet");

   originalHourlyRate = form.findComponent("OriginalHourlyRate").getDoubleValue();
   originalExternalRate = form.findComponent("OriginalExternalRate").getDoubleValue();
   originalAvailable = form.findComponent("OriginalAvailable").getDoubleValue();
   saveChanges = true;

   //if the hourlyRates tab was modified that is the priority
   modifiedPeriods = isModifiedHourlyTab();
   if (modifiedPeriods.size() > 0) {
      resource_id = form.findComponent("ResourceID").getStringValue();
      request = new XMessage;
      request.setAction("ResourceService.hasAssignmentsInTimePeriod");
      request.setArgument("resource_id", resource_id);
      request.setArgument("HourlyRatesSet", hourlyRatesSet);
      response = XDisplay.getClient().invokeMethod(request);
      hasAssignments = response.getArgument("AssignmentsInPeriod");
      if (hasAssignments == true) {
         //display
         dialog = XComponent.newDialog();
         parameters.resource_id = resource_id;
         parameters.resource_data = resource_data;
         parameters.changed = "hourlyTab";
         dialog.open("/modules/resource/forms/confirm_resource_change.oxf.xml", parameters);
         return;
      }
   }
   if (modifiedPeriods.size() == 0 && (hourlyRate != originalHourlyRate || externalRate != originalExternalRate
        || originalInherit != inheritFromPoolRate || available != originalAvailable)){
      //display confirm dialogue if resource is assigned on an activity
      resource_id = form.findComponent("ResourceID").getStringValue();
      request = new XMessage;
      request.setAction("ResourceService.hasAssignments");
      request.setArgument("resource_id", resource_id);
      if(originalInherit != inheritFromPoolRate && hourlyRate == originalHourlyRate && externalRate == originalExternalRate
           && available == originalAvailable){
         request.setArgument("checkInherit", true);   
      }
      response = XDisplay.getClient().invokeMethod(request);
      hasAssignments = response.getArgument("Assignments");      
      if (hasAssignments == true){
         //display
         dialog = XComponent.newDialog();
         parameters.resource_id = resource_id;
         parameters.resource_data = resource_data;
         if (hourlyRate != originalHourlyRate || externalRate != originalExternalRate || inheritFromPoolRate != originalInherit){
            parameters.changed = "firstTab";
         }
         else {
            parameters.changed = "availability";
         }
         dialog.open("/modules/resource/forms/confirm_resource_change.oxf.xml", parameters);
         return;
      }
   }

   request = new XMessage;
   request.setAction("ResourceService.updateResource");
   request.setArgument("resource_id", resource_id);
   request.setArgument("resource_data", resource_data);
   response = XDisplay.getClient().invokeMethod(request);

   if (handleError(form, response, "ErrorLabel") == true) {
      XDisplay.getActiveWindow().close();
      XDisplay.findFrame("MainFrame").refreshForm();
   }
}

function cancel(event) {
   XDisplay.getActiveWindow().close();
}

function selectUser(event) {
   openSubjectChooser(XDisplay.getActiveWindow().getID(), "addResourceSubject", true, false, null, false, null);
}

function addResourceSubject(subject) {
   form = XDisplay.getActiveForm();
   user_name_field = form.findComponent("UserName");
   user_name_field.setStringValue(subject);
   user_name_field.update();
}

function addProject(event) {
   form = XDisplay.getActiveForm();
   assignedProjects = form.findComponent("AssignedProjectDataSet");
   i = 0;
   while (i < assignedProjects.getChildCount()) {
      assignedDataRow = assignedProjects.getChild(i);
      filteredIds[i] = XValidator.choiceID(assignedDataRow.getStringValue());
      i++;
   }

   openProjectChooser("MainFrame", "assignToProject_NewEdit", null, null, true, false, false, filteredIds, true);
}


function removeProject(event) {
   form = XDisplay.getActiveForm();
   assigned_project_data_set = form.findComponent("AssignedProjectDataSet");
   selected_rows = assigned_project_data_set.selectedRows();
   assigned_project_data_set.removeDataRows(selected_rows);
   // Update assigned project list
   assigned_project_list_box = form.findComponent("AssignedProjectListBox");
   assigned_project_list_box.update();
}

function inheritPoolRate(event) {
   form = XDisplay.getActiveForm();
   source = event.event_source;
   shouldOverride = source.getValue();
   if (shouldOverride == true) {
      form.findComponent("HourlyRate").setEnabled(true);
      form.findComponent("ExternalRate").setEnabled(true);
   }
   else {
      form.findComponent("HourlyRate").setEnabled(false);
      form.findComponent("ExternalRate").setEnabled(false);
   }
   form.update();
}

//checks if any of the OpHourlyRatesPeriod from the Hourly Rates tab was modified and
//returns all modified OpHourlyRatesPeriods
function isModifiedHourlyTab() {
   newRatesDataSet = XDisplay.getActiveForm().findComponent("HourlyRatesSet");
   originalRatesDataSet = XDisplay.getActiveForm().findComponent("OriginalHourlyRatesSet");
   modifiedRates = new ArrayList;

   //add to modified rows the original rows that have changed
   i = 0;
   while (i < originalRatesDataSet.getChildCount()) {
      modified = true;
      originalRow = originalRatesDataSet.getChild(i);
      j = 0;
      while (j < newRatesDataSet.getChildCount()) {
         newRow = newRatesDataSet.getChild(j);
         if (originalRow.getChild(0).getDateValue() == newRow.getChild(0).getDateValue() &&
             originalRow.getChild(1).getDateValue() == newRow.getChild(1).getDateValue() &&
             originalRow.getChild(2).getDoubleValue() == newRow.getChild(2).getDoubleValue() &&
             originalRow.getChild(3).getDoubleValue() == newRow.getChild(3).getDoubleValue()) {
            modified = false;
            break;
         }
         j++;
      }
      if(modified){
         modifiedRates.add(originalRow);
      }
      i++;
   }

   //add to modified rows the newly changed or added rows
   i = 0;
   while (i < newRatesDataSet.getChildCount()) {
      modified = true;
      newRow = newRatesDataSet.getChild(i);
      j = 0;
      while (j < originalRatesDataSet.getChildCount()) {
         originalRow = originalRatesDataSet.getChild(j);
         if (originalRow.getChild(0).getDateValue() == newRow.getChild(0).getDateValue() &&
             originalRow.getChild(1).getDateValue() == newRow.getChild(1).getDateValue() &&
             originalRow.getChild(2).getDoubleValue() == newRow.getChild(2).getDoubleValue() &&
             originalRow.getChild(3).getDoubleValue() == newRow.getChild(3).getDoubleValue()) {
            modified = false;
            break;
         }
         j++;
      }
      if (modified){
         modifiedRates.add(newRow);
      }
      i++;
   }
   return modifiedRates;
}
