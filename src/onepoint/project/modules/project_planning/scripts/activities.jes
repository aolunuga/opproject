/*
 * Copyright(c) OnePoint Software GmbH 2007. All Rights Reserved.
 */

// Controller script for activities.oxf.xml

require "onepoint/project/scripts/error.jes";
require "onepoint/project/modules/project_planning/scripts/open_activity_details.jes";
require "onepoint/project/scripts/saveImage.jes";
require "onepoint/project/modules/resource/scripts/open_resource_chooser.jes";

import
onepoint.service.XMessage;
import
onepoint.express.XDisplay;
import
onepoint.express.XComponent;
import
onepoint.express.XValidator;
import
onepoint.util.XCalendar;
import
java.util.TreeSet;
import
java.util.Set;
import
java.util.Iterator;

function refreshForms(parameters) {
   arguments[0] = parameters;
   frames[0] = XDisplay.findFrame("ProjectContentFrame");
   frames[1] = XDisplay.findFrame("ProjectNavigatorFrame");
   XDisplay.refreshForms(frames, arguments);
}

function timeUnitChanged(event) {
   // *** Get current choice from choice-field
   choice_field = XDisplay.getActiveForm().findComponent("TimeUnitChooser");
   choice_id = XValidator.choiceID(choice_field.getStringValue());
   // *** Find component gantt-box via ID
   gantt_box = XDisplay.getActiveForm().findComponent("ActivityGanttChart");
   // *** Invoke setTimeUnit(time_unit) on gantt-box
   if (choice_id.equals("d")) {
      gantt_box.setTimeUnit(2);
      // XCalendar.DAYS;
   }
   if (choice_id.equals("w")) {
      gantt_box.setTimeUnit(3);
      // XCalendar.WEEKS;
   }
   if (choice_id.equals("m")) {
      gantt_box.setTimeUnit(4);
      // XCalendar.MONTHS;
   }

   gantt_box.resetCalendar();
   gantt_box.doLayout();
   gantt_box.repaint();
}

function editActivities(event) {

   XDisplay.setWaitingCursor();
   // *** Check-out project and go into "edit-mode"
   project_id_field = XDisplay.getActiveForm().findComponent("ProjectIDField");
   project_id = project_id_field.getStringValue();
   request = new XMessage;
   request.setAction("PlanningService.editActivities");
   request.setArgument("project_id", project_id);
   response = XDisplay.getClient().invokeMethod(request);

   warning = response.getArgument("warning");
   success = true;

   resetWBSToolBarSelection();

   if (warning != null) {
      XDisplay.resetCursor();
      //this needs to be the last call (otherwise the window is closed)
      parameters.project_id = project_id;
      parameters.validatePlan = true;
      args[0] = parameters;
      showWarning(response, warning, "ProjectContentFrame", "refreshForms", args);
   }
   else {
      success = handleError(XDisplay.getActiveForm(), response, "ValidationErrorLabel");
      if (success) {
         parameters.project_id = project_id;
         refreshForms(parameters);
      }
      XDisplay.resetCursor();
   }
}

function updateSubProjects() {
}

function saveActivities(event) {
   project_id_field = XDisplay.getActiveForm().findComponent("ProjectIDField");
   project_id = project_id_field.getStringValue();
   source_plan_version_id_field = XDisplay.getActiveForm().findComponent("SourcePlanVersionIDField");
   Console.println("source field: " + source_plan_version_id_field);
   source_plan_version_id = source_plan_version_id_field.getStringValue();
   activity_set = XDisplay.getActiveForm().findComponent("ActivitySet");

   activity_set.removeDummyRows();

   XDisplay.setWaitingCursor();
   request = new XMessage;
   request.setAction("PlanningService.saveActivities");
   request.setArgument("project_id", project_id);
   request.setArgument("source_plan_version_id", source_plan_version_id);
   request.setArgument("activity_set", activity_set);
   response = XDisplay.getClient().invokeMethod(request);

   // *** TODO: Check error response and show error message
   // Refresh form
   parameters.project_id = project_id;
   XDisplay.findFrame("ProjectContentFrame").refreshForm(parameters);
   XDisplay.resetCursor();
}

function importActivities(event) {
   projectType = XDisplay.getActiveForm().findComponent("ProjectType").getByteValue();
   if (projectType != 3) {
      showErrorDialog("project_planning.error", "InvalidProjectNodeTypeForImport", null, null);
      return;
   }
   importProject = XDisplay.getActiveForm().findComponent("ImportProjectTitle").getText();

   edit_mode = XDisplay.getActiveForm().findComponent("EditModeField").getBooleanValue();
   activity_set = XDisplay.getActiveForm().findComponent("ActivitySet");
   project_id_field = XDisplay.getActiveForm().findComponent("ProjectIDField");
   project_id = project_id_field.getStringValue();
   project_name = XDisplay.getActiveForm().findComponent("ProjectName").getStringValue();

   activity_set.removeDummyRows();
   XDisplay.getActiveForm().findComponent("ActivityTable").update();
   XDisplay.getActiveForm().findComponent("CostTable").update();

   parameters.ProjectId = project_id;
   parameters.ProjectName = project_name;
   parameters.EditMode = edit_mode;
   parameters.ActivitySet = activity_set;
   dialog = XComponent.newDialog();
   
   dialog.open("/modules/project_planning/forms/choose_import_source.oxf.xml", parameters);
}

function fileImport(importProject) {
   edit_mode = XDisplay.getActiveForm().findComponent("EditModeField").getBooleanValue();
   activity_set = XDisplay.getActiveForm().findComponent("ActivitySet");
   project_id_field = XDisplay.getActiveForm().findComponent("ProjectIDField");
   project_id = project_id_field.getStringValue();
   project_name = XDisplay.getActiveForm().findComponent("ProjectName").getStringValue();

   activity_set.removeDummyRows();
   XDisplay.getActiveForm().findComponent("ActivityTable").update();
   XDisplay.getActiveForm().findComponent("CostTable").update();

   parameters.ProjectId = project_id;
   parameters.ProjectName = project_name;
   parameters.EditMode = edit_mode;
   parameters.ActivitySet = activity_set;
   dialog = XComponent.newDialog();
   dialog.open("/modules/project_planning/forms/confirm_import_project.oxf.xml", parameters);
   
   parameters.project_id = project_id;
   refreshForms(parameters);

}

function exportActivities(event) {
   projectType = XDisplay.getActiveForm().findComponent("ProjectType").getByteValue();
   if (projectType != 3) {
      showErrorDialog("project_planning.error", "InvalidProjectNodeTypeForExport", null, null);
      return;
   }

   exportProject = XDisplay.getActiveForm().findComponent("ExportProjectTitle").getText();

   filters = new HashMap;
   filters.put("Microsoft Project (.mpx)", "*.mpx");
   filters.put("Microsoft Excel (.xls)", "*.xls");
   filters.put("Microsoft Project (.xml)", "*.xml");
   fileName = XDisplay.showFileDialog(exportProject, false, null, filters, true);
   if (fileName == null) {
      return;
   }
   activity_set = XDisplay.getActiveForm().findComponent("ActivitySet");
   project_id_field = XDisplay.getActiveForm().findComponent("ProjectIDField");
   project_id = project_id_field.getStringValue();

   activity_set.removeDummyRows();
   XDisplay.getActiveForm().findComponent("ActivityTable").update();
   XDisplay.getActiveForm().findComponent("CostTable").update();

   request = new XMessage;
   request.setAction("PlanningService.exportActivities");
   request.setArgument("project_id", project_id);
   request.setArgument("activity_set", activity_set);
   request.setArgument("file_name", fileName);

   client = XDisplay.getClient();

   response = client.invokeMethod(request);
   if (handleResponse(response, null, null) == false) {
      return;
   }

   //get byte array
   byte_array = response.getArgument("bytes_array");
   file_name = response.getArgument("file_name");
   response = File.writeBytes(file_name, byte_array);

   if (handleResponse(response, null, null) == false) {
      return;
   }
}

function getPrintTitle(tabBox) {
   cur_tab = tabBox.getIntValue();
   tabName = tabBox.getChild(cur_tab + 1).getText();
   printTitle = XDisplay.getActiveForm().findComponent("PrintTitle").getStringValue();
   title = printTitle + " - ";
   title = title + tabName;
   return title;
}


function getCurrentTabId(tabBox) {
   cur_tab = tabBox.getIntValue();
   tab = tabBox.getChild(cur_tab + 1);
   tabId = tab.getID();
   return tabId;
}


function print(event) {
   tabBox = XDisplay.getActiveForm().findComponent("MyTabBox");
   tabId = getCurrentTabId(tabBox);

   activity_set = XDisplay.getActiveForm().findComponent("ActivitySet");
   activity_set.removeDummyRows();
   XDisplay.getActiveForm().findComponent("ActivityTable").update();
   XDisplay.getActiveForm().findComponent("CostTable").update();

   if (tabId == "TasklistTab") {
      title = getPrintTitle(tabBox);
      activity_table = XDisplay.getActiveForm().findComponent("ActivityTable");
      activity_table.print(title);
   }
   else {
      if (tabId == "GanttDiagramTab") {
         title = getPrintTitle(tabBox);
         gantt_chart = XDisplay.getActiveForm().findComponent("ActivityGanttChart");
         gantt_chart.print(title);
      }
      else {
         if (tabId == "CostsProjectionTab") {
            title = getPrintTitle(tabBox);
            cost_table = XDisplay.getActiveForm().findComponent("CostTable");
            cost_table.print(title);
         }
      }
   }
}

function save(form) {
	comp = form.findComponent("EditModeField");
	if (comp !=null && comp.getValue() != null) {
		edit_mode = comp.getBooleanValue();
		if (edit_mode) {
			doSave(form);
		}
	}
}

function doSave(form) {
	project_id = form.findComponent("ProjectIDField").getStringValue();
	// Only try to auto-save if a project is loaded and edit mode is on
	if (project_id != null) {
		Console.println("   Project id set");
		source_plan_version_id_field = form.findComponent("SourcePlanVersionIDField");
		source_plan_version_id = source_plan_version_id_field.getStringValue();
		activity_set = form.findComponent("ActivitySet");
		activity_set.removeDummyRows();
		request = new XMessage;
		request.setAction("PlanningService.saveActivities");
		request.setArgument("project_id", project_id);
		request.setArgument("source_plan_version_id", source_plan_version_id);
		request.setArgument("activity_set", activity_set);
		response = XDisplay.getClient().invokeMethod(request);
	}
}

function autoSave(event) {
   form = event.sourceForm;
   save(form);
}

function projectChanged(newProjectDescriptor) {
   form = XDisplay.findFrame("ProjectContentFrame").currentForm();
   if (newProjectDescriptor.equals("p") || newProjectDescriptor.equals("t")) {
      if (newProjectDescriptor.equals("t")) {
         //disable import/export buttons
         disableImportExportButtons(form);
         form.repaint();
      }
      //auto save
      save(form);
   }
   else {
      //disable toolbar buttons
      form.findComponent("EditButton").setEnabled(false);
      form.findComponent("SaveButton").setEnabled(false);
      form.findComponent("CheckInButton").setEnabled(false);
      form.findComponent("PrintButton").setEnabled(false);
      form.findComponent("RevertButton").setEnabled(false);
      disableImportExportButtons(form);
      form.repaint();
   }
}

function disableImportExportButtons(form) {
   form.findComponent("ImportButton").setEnabled(false);
   form.findComponent("ExportButton").setEnabled(false);
}

function checkInActivities(event) {
   // *** Optional dialog [check-box: Do not show again] for check-in?
   // ==> Would allow to type in comments for a version and to control number
   // *** In this case, check-in dialog would engage actual check-in method

   XDisplay.setWaitingCursor();
   project_id_field = XDisplay.getActiveForm().findComponent("ProjectIDField");
   project_id = project_id_field.getStringValue();
   source_plan_version_id_field = XDisplay.getActiveForm().findComponent("SourcePlanVersionIDField");
   source_plan_version_id = source_plan_version_id_field.getStringValue();
   activity_set = XDisplay.getActiveForm().findComponent("ActivitySet");
   activity_set.removeDummyRows();
   request = new XMessage;
   request.setAction("PlanningService.checkInActivities");
   request.setArgument("project_id", project_id);
   request.setArgument("source_plan_version_id", source_plan_version_id);
   request.setArgument("activity_set", activity_set);
   response = XDisplay.getClient().invokeMethod(request);
   success = handleResponse(response, null, null);

   if (success == true) {
      parameters.project_id = project_id;
      refreshForms(parameters);
   }
   XDisplay.resetCursor();
}

function revertActivities(event) {
   // Revert project plan
   project_id_field = XDisplay.getActiveForm().findComponent("ProjectIDField");
   project_id = project_id_field.getStringValue();

   parameters.ProjectId = project_id;
   dialog = XComponent.newDialog();
   dialog.open("/modules/project_planning/forms/confirm_revert_project.oxf.xml", parameters);
}


function updateAllViews() {
   XDisplay.getActiveForm().findComponent("ActivityTable").update();
   XDisplay.getActiveForm().findComponent("CostTable").update();
   XDisplay.getActiveForm().findComponent("ActivityGanttChart").resetCalendar();
   XDisplay.getActiveForm().findComponent("ActivityGanttChart").update();
}


function addActivity(before) {
   activity_data_set = XDisplay.getActiveForm().findComponent("ActivitySet");
   selected_rows = activity_data_set.selectedRows();
   data_row = activity_data_set.newDataRow();
   outline_level = 0;

   if (selected_rows.size() > 0) {
      expanded = false;
      if (before) {//insert before
         index = selected_rows[0].getIndex();
         if (index > 0) {
            before_row = activity_data_set.getChild(index - 1);
            outline_level = before_row.getOutlineLevel();
            expanded = before_row.getExpanded();
            if (outline_level > 0) {
               parentRow = before_row.getParentInDataSet();
               if (!parentRow.getExpanded()) {
                  parentRow.expanded(true, false);
               }
            }
         }
         data_row.setExpanded(expanded);
         data_row.setOutlineLevel(outline_level);
         activity_data_set.addDataRow(index, data_row);
      }
      else { //insert after
         current_row = selected_rows[0];
         index = current_row.getIndex();
         outline_level = current_row.getOutlineLevel();
         expanded = current_row.getExpanded();
         data_row.setExpanded(expanded);
         data_row.setOutlineLevel(outline_level);
         activity_data_set.addDataRow(index + 1, data_row);
      }
   }
   else {
      nr_children = activity_data_set.getChildCount();
      if (nr_children != 0) {
         last_row = activity_data_set.getChild(nr_children - 1);
         outline_level = last_row.getOutlineLevel();
      }
      data_row.setOutlineLevel(outline_level);
      activity_data_set.addDataRow(data_row);
   }

   updateAllViews();
}

function addActivityBefore(event) {
   addActivity(true);
}

function addActivityAfter(event) {
   addActivity(false);
}


function removeActivities(event) {
   // *** Same as above, but call DATA_SET.removeDataRows(selected_rows);
   // ==> DATA_SET in turn calls validator if a validator is defined
   activity_data_set = XDisplay.getActiveForm().findComponent("ActivitySet");
   activity_data_set.completeSelection();
   selected_rows = activity_data_set.selectedRows();
   if (selected_rows.size() > 0) {
      projectIDsRemoved = new TreeSet;
      i = 0;
      while (i < selected_rows.size()) {
         subProjectId = OpGanttValidator.getSubProject(selected_rows[i]);
         if (subProjectId != null) {
            projectIDsRemoved.add(subProjectId);
            Console.println("Removed Subproject: " + subProjectId);
         }
         i++;
      }
      activity_data_set.removeDataRows(selected_rows);
      i = 0;
      while (!projectIDsRemoved.isEmpty()) {
         it = projectIDsRemoved.iterator();
         XDisplay.getActiveForm().findComponent("IncludedProjects").getValue().remove(it.next());
         it.remove();
      }
      updateAllViews();
   }
}


function moveActivitiesUp(event) {
   activity_data_set = XDisplay.getActiveForm().findComponent("ActivitySet");
   activity_data_set.move(-1);
}

function moveActivitiesDown(event) {
   activity_data_set = XDisplay.getActiveForm().findComponent("ActivitySet");
   activity_data_set.move(1);
}

function moveActivitiesIn(event) {
   activity_data_set = XDisplay.getActiveForm().findComponent("ActivitySet");
   activity_data_set.completeSelection();
   selected_rows = activity_data_set.selectedRows();
   if (selected_rows.size() > 0) {
      activity_data_set.changeOutlineLevels(selected_rows, 1);
   }
}

function moveActivitiesOut(event) {
   activity_data_set = XDisplay.getActiveForm().findComponent("ActivitySet");
   activity_data_set.completeSelection();
   selected_rows = activity_data_set.selectedRows();
   if (selected_rows.size() > 0) {
      activity_data_set.changeOutlineLevels(selected_rows, -1);
   }
}

function cutActivities(event) {
   activity_data_set = XDisplay.getActiveForm().findComponent("ActivitySet");
   activity_data_set.completeSelection();
   selected_rows = activity_data_set.selectedRows();
   if (selected_rows.size() > 0) {
      activity_data_set.cutToClipboard(selected_rows);
      updateAllViews();
   }
}

function copyActivities(event) {
   activity_data_set = XDisplay.getActiveForm().findComponent("ActivitySet");
   activity_data_set.completeSelection();
   selected_rows = activity_data_set.selectedRows();
   if (selected_rows.size() > 0) {
      activity_data_set.copyToClipboard(selected_rows);
      updateAllViews();
   }
}

function pasteActivities(event) {

   activity_data_set = XDisplay.getActiveForm().findComponent("ActivitySet");
   tabBox = XDisplay.getActiveForm().findComponent("MyTabBox");
   tabId = getCurrentTabId(tabBox);

   table = null;
   if (tabId == "TasklistTab") {
      activityTable = XDisplay.getActiveForm().findComponent("ActivityTable");
      table = activityTable;
   }
   else {
      if (tabId == "CostsProjectionTab") {
         costTable = XDisplay.getActiveForm().findComponent("CostTable");
         table = costTable;
      }
   }

   insert = false;
   //replace/insert
   selected_rows = null;

   if (table != null) {
      //the tables - get only full selected rows
      table.removeSorting();
      activity_data_set.completeSelection();
      data_selected_rows = activity_data_set.selectedRows();
      all_selected_rows = table.fullSelectedRows(data_selected_rows);
      if (all_selected_rows.size() == 0) {
         //no full selected rows ->
         selected_rows = data_selected_rows;
         insert = true;
      }
      else {
         selected_rows = all_selected_rows;
      }
   }
   else {
      //the other components
      activity_data_set.completeSelection();
      selected_rows = activity_data_set.selectedRows();
   }

   //paste action
   if (selected_rows.size() > 0) {
      activity_data_set.pasteFromClipboard(selected_rows, insert);
      updateAllViews();
   }
   else {
      //insert into an empty data set  (add a dummy row and paste over it)
      if (activity_data_set.getChildCount() == 0) {
         data_row = activity_data_set.newDataRow();
         activity_data_set.addChild(data_row);
         selected_rows[0] = data_row;
         activity_data_set.pasteFromClipboard(selected_rows, false);
         updateAllViews();
      }
   }
}

function changeGanttTool(event) {
   // *** Find component gantt-box via ID
   gantt_box = XDisplay.getActiveForm().findComponent("ActivityGanttChart");
   toggle_bar = XDisplay.getActiveForm().findComponent("GanttToggleBar");
   state = toggle_bar.getIntValue();
   button = toggle_bar.getChild(state);
   id = button.getID();
   gantt_box.changeTool(id);
}


function saveActivitiesImage(event) {
   saveAsImage(XDisplay.getActiveForm().findComponent("ActivityTable"), "Save Activities");
}

function saveCostsImage(event) {
   saveAsImage(XDisplay.getActiveForm().findComponent("CostTable"), "Save Costs");
}

function saveGanttImage(event) {
   saveAsImage(XDisplay.getActiveForm().findComponent("ActivityGanttChart"), "Save Gantt");
}


function saveActivitiesCSVFile(event) {
   activity_table = XDisplay.getActiveForm().findComponent("ActivityTable");
   activity_table.saveAsCSV("Save Activities");
}

function saveCostsCSVFile(event) {
   cost_table = XDisplay.getActiveForm().findComponent("CostTable");
   cost_table.saveAsCSV("Save Costs");
}

function enableActivitiesPopUp(event) {
   //filter pop up menu if project plan is not in edit mode
   edit_mode = XDisplay.getActiveForm().findComponent("EditModeField").getBooleanValue();
   if (!edit_mode) {
      pop_up_menu = event.popUp;
      pop_up_menu.getChild(0).setEnabled(false);
      //cutActivities
      pop_up_menu.getChild(1).setEnabled(false);
      //copyActivities
      pop_up_menu.getChild(2).setEnabled(false);
      //pasteActivities
      pop_up_menu.getChild(4).setEnabled(false);
      //addActivityBefore
      pop_up_menu.getChild(5).setEnabled(false);
      //addActivityAfter
      pop_up_menu.getChild(6).setEnabled(false);
      //removeActivities
      pop_up_menu.getChild(8).setEnabled(false);
      //editActivity
      pop_up_menu.getChild(10).setEnabled(false);
      //validateActivities
   }

}

function undo(event) {
   activity_data_set = XDisplay.getActiveForm().findComponent("ActivitySet");
   activity_data_set.dataSetUndo();
   updateAllViews();
}

function redo(event) {
   activity_data_set = XDisplay.getActiveForm().findComponent("ActivitySet");
   activity_data_set.dataSetRedo();
   updateAllViews();
}

function prepareResourceCaption(caption) {
   percentString = "%";
   hoursString = "h";
   captionLen = caption.length();
   captionToCompare = caption;
   if (captionLen > 0) {
      lastCaptionString = String.valueOf(caption.charAt(captionLen - 1));
      if (lastCaptionString.equals(percentString) || lastCaptionString.equals(hoursString)) {
         lastSpaceIndex = caption.lastIndexOf(" ");
         if (lastSpaceIndex > -1) {
            number = caption.substring(lastSpaceIndex + 1, captionLen - 1);
            if (XCalendar.isDouble(number)) {
               captionToCompare = caption.substring(0, lastSpaceIndex);
            }
         }
      }
   }
   return captionToCompare;
}

function compareChoiceResources(dataCaption, editValue) {
   dataCaptionToCompare = prepareResourceCaption(dataCaption);
   editValueToCompare = prepareResourceCaption(editValue);
   result = dataCaptionToCompare.equals(editValueToCompare);
   return result;
}

function validateActivities(event) {
   activity_data_set = XDisplay.getActiveForm().findComponent("ActivitySet");
   activity_data_set.validateAll();
}

function getActivityForm() {
   frame = XDisplay.findFrame("ProjectContentFrame");
   form = frame.getChild(0);
   return form;
}

/**
 * Handler used when activating the planning table (is not used here)
 * @Overridden
 */
function activatePlanningTable(event) {
}

/**
 * @Overridden
 */
function resetWBSToolBarSelection() {
}

function addResponsableResourceOk(event) {

   selectedRow = event.get(0).getStringValue();
   form = XDisplay.getActiveForm();
   responsibleResource = form.findComponent("ResponsibleResource");
   responsibleResource.setStringValue(selectedRow);
}

function activatePayment(event) {
}

function deactivatePayment(event) {
}

function assignResource(event) {
   form = XDisplay.getActiveForm();
   // Console.println("assignResource: " + event);
   activitySet = form.findComponent("ActivitySet");
   validator = activitySet.validator();
   assignmentSet = validator.getAssignmentSet();
   i = 0;
   resourceIds = new HashSet;
   while (i < assignmentSet.getChildCount()) {
      resourceIds.add(XValidator.choiceID(assignmentSet.getChild(i).getStringValue()));
      i++;
   }
   // Console.println("resourceIds: " + resourceIds);
   openResourceChooser("ProjectContentFrame", "doAssignResources", resourceIds, true, false, true, null);
}

function doAssignResources(selectedResources) {
   form = XDisplay.getActiveForm();
   doSave(form);
   // Console.println("Selection: " + selectedResources);

   i = 0;
   rit = selectedResources.iterator();
   while (rit.hasNext()) {
      res = rit.next();
      resourceIds[i++] = XValidator.choiceID(res.getStringValue());
   }

   projectIds[0] = form.findComponent("ProjectIDField").getStringValue();

   // Console.println("projectIds: " + projectIds + " resourceIds:" + resourceIds);

   request = new XMessage;
   request.setAction("ResourceService.assignToProject");
   request.setArgument("resource_ids", resourceIds);
   request.setArgument("project_ids", projectIds);
   response = XDisplay.getClient().invokeMethod(request);

   if (handleResponse(response, null, null)) {
	   parameters.project_id = projectIds[0];
	   refreshForms(parameters);
   }
}

