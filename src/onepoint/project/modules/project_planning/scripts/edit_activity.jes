/*
 * Copyright(c) OnePoint Software GmbH 2007. All Rights Reserved.
 */

// Controller script for edit_activity.oxf.xml
require
"onepoint/project/scripts/error.jes";
require
"onepoint/project/modules/project_planning/scripts/attachments.jes";
require
"onepoint/project/modules/project_planning/scripts/comments.jes";

import
onepoint.service.XMessage;
import
onepoint.express.XDisplay;
import
onepoint.express.XComponent;
import
onepoint.express.XValidator;
import
onepoint.util.XCalendar;

function addURLAttachment(event) {
   addURL(event);
}

function addDocumentAttachment(event) {
   addDocument(event);
}

function removeAttachments(event) {
   remove(event);
}

function viewAttachment(event) {
   view(event);
}

function addAssignment(event) {
   cur_form = XDisplay.getActiveForm();
   assignment_data_set = cur_form.findComponent("AssignmentSet");

   dialog = XComponent.newDialog();
   form = dialog.loadForm("/modules/project_planning/forms/add_resource.oxf.xml");
   new_resource_set = form.findComponent("ResourceDataSet");
   resourceAvailabilityMap = cur_form.findComponent("ResourceAvailability");
   dialogAvailabilityMap = form.findComponent("ResourceAvailability");
   dialogAvailabilityMap.setValue(resourceAvailabilityMap.getValue());

   resource_set = XDisplay.findFrame("ProjectContentFrame").currentForm().findComponent("AssignmentSet");

   i = 0;
   while (i < resource_set.getChildCount()) {
      data_row = resource_set.getChild(i);
      resource_name = data_row.getStringValue();

      res = XValidator.choiceID(resource_name);
      nrChildren = assignment_data_set.getChildCount();
      j = 0;
      found = false;
      while (j < nrChildren) {
         assigned_resource_row = assignment_data_set.getChild(j);
         assigned_resource = assigned_resource_row.getChild(0);
         assigned_name = assigned_resource.getStringValue();
         assigned_res = XValidator.choiceID(assigned_name);
         if (assigned_res == res) {
            found = true;
            break;
         }
         j++;
      }

      if (!found) {
         p_row = new_resource_set.newDataRow();
         p_row.setStringValue(resource_name);
         new_resource_set.addDataRow(p_row);
      }
      i++;
   }

   nrChoice = new_resource_set.getChildCount();
   if (nrChoice > 0) {
      dialog.open();
   }
}

function removeAssignments(event) {
   activeForm = XDisplay.getActiveForm();

   activity_set = XDisplay.findFrame("ProjectContentFrame").currentForm().findComponent("ActivitySet");
   activity_row_index = activeForm.findComponent("ActivityRowIndex").getIntValue();
   activity_row = activity_set.getChild(activity_row_index);
   workRecordsMap = activity_row.getChild(24).getValue();

   data_set = activeForm.findComponent("AssignmentSet");
   selected_rows = data_set.selectedRows();
   if (selected_rows.size() > 0) {
      i = 0;
      while (i < selected_rows.size()) {
         selectedResource = selected_rows[i].getChild(0).getStringValue();
         resourceLocator = XValidator.choiceID(selectedResource);
         if (workRecordsMap.get(resourceLocator) == true) {
            hasWorkRecords = workRecordsMap.get(resourceLocator);
            errorText = activeForm.findComponent("WorkRecordsExistException").getText();
            errorLabel = activeForm.findComponent("ValidationErrorLabel");
            errorLabel.setText(errorText);
            errorLabel.setVisible(true);
            activeForm.doLayout();
            activeForm.repaint();
            return;
         }
         i++;
      }
      data_set.removeDataRows(selected_rows);
      //get activity type
      type_data_cell = activity_row.getChild(1);
      activity_type = type_data_cell.getByteValue().toInt();
      if (activity_type == 3) { // OpActivity.TASK
         activeForm.findComponent("ResourceAddIcon").setEnabled(true);
      }
      activeForm.findComponent("AssignmentTable").update();
   }
}

function addPredecessor(event) {
   cur_form = XDisplay.getActiveForm();

   dialog = XComponent.newDialog();
   form = dialog.loadForm("/modules/project_planning/forms/add_predecessor.oxf.xml");
   predecessor_set = form.findComponent("ActivityDataSet");
   activity_set = XDisplay.findFrame("ProjectContentFrame").currentForm().findComponent("ActivitySet");
   activity_predecessor_set = cur_form.findComponent("PredecessorSet");

   i = 0;
   row_index = cur_form.findComponent("ActivityRowIndex").getValue();
   row_index_int = Integer.parseInt(row_index.toString());

   while (i < activity_set.getChildCount()) {
      if (i != row_index_int) {
         data_row = activity_set.getChild(i);
         activity_name = data_row.getChild(0).getStringValue();
         data_cell = data_row.getChild(1);
         activity_type = data_cell.getByteValue().toInt();
         if (activity_type != 3 && activity_type != 4) {
            exists = existsPredecessor(activity_name, activity_predecessor_set);
            if (!exists) {
               p_choice = XValidator.choice(i.toString(), activity_name);
               p_row = predecessor_set.newDataRow();
               p_row.setStringValue(p_choice);
               predecessor_set.addDataRow(p_row);
            }
         }
      }
      i++;
   }

   dialog.open();
}

function existsPredecessor(activityName, predecessorSet) {
   i = 0;
   exists = false;
   while (i < predecessorSet.getChildCount()) {
      predecessorRow = predecessorSet.getChild(i);
      predecessorName = XValidator.choiceCaption(predecessorRow.getChild(0).getStringValue());
      if (activityName.equals(predecessorName)) {
         exists = true;
         return exists;
      }
      i++;
   }
   return exists;
}

function removePredecessors(event) {
   data_set = XDisplay.getActiveForm().findComponent("PredecessorSet");
   selected_rows = data_set.selectedRows();
   if (selected_rows.size() > 0) {
      data_set.removeDataRows(selected_rows);
      XDisplay.getActiveForm().findComponent("PredecessorTable").update();
   }
}


// FIXME OPP-456, OPP459
// if something goes wrong during OK (little boost in ugliness... ;-)
function prepareBailOut(activity_set) {
   validator = activity_set.validator();
   activity_set.dataSetUndo();  // must be BEFORE setCont'Action call (see OpGanttValidator.undo, why)
   validator.setContinuousAction(false);
   XDisplay.findFrame("ProjectContentFrame").doLayout();
   XDisplay.findFrame("ProjectContentFrame").repaint();
}
// /FIXME OPP-456, OPP459...

// prepare resources for data_cell id 26:
function prepareResources(ass, resources_tab, ass_array) {
  if (!resources_tab.isHidden()) {
     ass_project = XDisplay.findFrame("ProjectContentFrame").currentForm().findComponent("AssignmentSet");
     i = 0;
     while (i < ass.getChildCount()) {
        data_row = ass.getChild(i);
        val = data_row.getChild(0).getStringValue();

        id = XValidator.choiceID(val);
        caption = XValidator.choiceCaption(val);
        asigned = data_row.getChild(1).getDoubleValue();

        available = 0;
        j = 0;
        while (j < ass_project.getChildCount()) {
           res_data_row = ass_project.getChild(j);
           available_data_cell = res_data_row.getChild(0);
           available_res = available_data_cell.getDoubleValue();
           idRes = XValidator.choiceID(res_data_row.getStringValue());
           if (id == idRes) {
              available = available_res;
           }
           j++;
        }

        available_s = XCalendar.localizedDoubleToString(available);
        asigned_s = XCalendar.localizedDoubleToString(asigned);
        if (available_s != asigned_s) {
           caption = caption.concat(" ");
           caption = caption.concat(asigned_s);
           caption = caption.concat("%");
        }

        ass_array.add(XValidator.choice(id, caption));
        i++;
     }
  }
}

function ok(event) {
   MANDATORY_MASK = 1;
   ALL_BITS = 2147483647; // 31 bits set (may the lord be with us)

   form = XDisplay.getActiveForm();
   //the project edit mode
   edit_mode = form.findComponent("EditModeField").getBooleanValue();
   if (edit_mode) {

      fieldNames = new HashMap;
      fieldNames.put(0, "Name");
      // fieldNames.put(2, "Category");
      fieldNames.put(3, "Complete");
      fieldNames.put(4, "Start");
      fieldNames.put(5, "End");
      fieldNames.put(6, "Duration");
      fieldNames.put(7, "BaseEffort");
      fieldNames.put(8, "PredecessorSet");
      fieldNames.put(11, "PersonnelCosts");
      fieldNames.put(12, "TravelCosts");
      fieldNames.put(13, "MaterialCosts");
      fieldNames.put(14, "ExternalCosts");
      fieldNames.put(15, "MiscellaneousCosts");
      fieldNames.put(16, "Description");
      fieldNames.put(18, "Mandatory");
      fieldNames.put(23, "Priority");
      fieldNames.put(26, "ResourcesTab");
      fieldNames.put(27, "ResponsibleResource");
      fieldNames.put(29, "Payment");

      // several preparations:
      activity_row_index = form.findComponent("ActivityRowIndex").getIntValue();
      activity_set = XDisplay.findFrame("ProjectContentFrame").currentForm().findComponent("ActivitySet");
      activity_row = activity_set.getChild(activity_row_index);

      validator = activity_set.validator();
      validator.setContinuousAction(false); // enforce element on undo stack...  // FIXME OPP-456, OPP459
      validator.setContinuousAction(true);

      // overlay those special values...
      fieldOverlay = new HashMap;
      
      // Predecessors
      pre = form.findComponent("PredecessorSet");
      pre_array = new ArrayList;
      i = 0;
      while (i < pre.getChildCount()) {
         data_row = pre.getChild(i);
         data_cell = data_row.getChild(0);
         val = data_cell.getStringValue();
         id = XValidator.choiceID(val);
         pre_array.add(Integer.parseInt(id));
         i++;
      }
      fieldOverlay.put(8, pre_array);

      // Resources
      resources_tab = form.findComponent("ResourcesTab");
      ass_array = new ArrayList;
      ass = form.findComponent("AssignmentSet");
      prepareResources(ass, resources_tab, ass_array);
      fieldOverlay.put(26, ass_array);

      // Duration
      duration = form.findComponent("Duration").getDoubleValue();
      durationColumn = XDisplay.findFrame("ProjectContentFrame").currentForm().findComponent("ActivityTable").getChild(3).getChild(0).getChild(7);
      durationUnit = durationColumn.getDisplayUnit();
      fieldOverlay.put(6, XCalendar.convertDurationFromUnit(duration, durationUnit));
      
      // Mandatory
      mandatory_field = form.findComponent("Mandatory");
      if (mandatory_field.getEnabled()) {
         mandatory = mandatory_field.getBooleanValue();
         attributes = activity_row.getChild(18).getIntValue();
         if ((mandatory == false) && ((attributes & 1) == 1)) {
            attributes = attributes & ALL_BITS - MANDATORY_MASK;
         }
         else {
            if ((mandatory == true) && ((attributes & 1) == 0)) {
               attributes = attributes | 1;
            }
         }
         fieldOverlay.put(18, attributes);
      }
      
      // remember those changes:
      fieldsToChange = new ArrayList;
      valuesToSet = new ArrayList;
      // setup row with changed values...
      deltaDataRow = new ArrayList;
      i = 0;
      while (i < activity_row.getChildCount()) {
        fieldName = fieldNames.get(i);
        if (fieldName != null) {
          Console.println("Checking for " + fieldName);
          field = form.findComponent(fieldName);
          // check whether we are enabled:
	        if (field.getEnabled() && field.getVisible()) {
	          // do we have pre-calculated overlays?
	          value = fieldOverlay.get(i);
	          if (value == null) {
	            value = field.getValue();
	          }
            // only changed Values
            if (value != activity_row.getChild(i).getValue()) {
              Console.println("Changing value for " + fieldName);
              fieldsToChange.add(i);
              valuesToSet.add(value);
			      }
	        }
	      }
        i++;
      }

      i = 0;
      while (i < fieldsToChange.size()) {
         if (!activity_set.setDataCellValue(activity_row, fieldsToChange[i], valuesToSet[i], form)) {
            prepareBailOut(activity_set); // FIXME OPP-456, OPP459
            return;
         }
         i++;
      }

      // Update category
      category = form.findComponent("Category").getStringValue();
      if (category != null) { //all activities except TASK and COLLECTION_TASK
         if (!activity_set.setDataCellValue(activity_row, 2, category, form)) {
            prepareBailOut(activity_set); // FIXME OPP-456, OPP459
            return;
         }
      }

      // Update attachments
      att_array = getAttachments();
      if (!activity_set.setDataCellValue(activity_row, 17, att_array, form)) {
         prepareBailOut(activity_set); // FIXME OPP-456, OPP459
         return;
      }

      validator.setContinuousAction(false);
      XDisplay.getActiveWindow().close();
      XDisplay.findFrame("ProjectContentFrame").doLayout();
      XDisplay.findFrame("ProjectContentFrame").repaint();
   }
   else {
      XDisplay.getActiveWindow().close();
   }
}

function addComment(event) {
   // Open add-comment dialog w/activity-locator as parameter
   activityLocator = XDisplay.getActiveForm().findComponent("ActivityIDField").getStringValue();
   addActivityComment(activityLocator);
}

function cancel(event) {
   XDisplay.getActiveWindow().close();
}
