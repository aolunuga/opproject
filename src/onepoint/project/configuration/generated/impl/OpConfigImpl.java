//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.6-01/24/2006 06:08 PM(kohsuke)-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2007.07.05 at 10:34:01 AM CEST 
//


package onepoint.project.configuration.generated.impl;

public class OpConfigImpl implements onepoint.project.configuration.generated.OpConfig, com.sun.xml.bind.JAXBObject, onepoint.project.configuration.generated.impl.runtime.UnmarshallableObject, onepoint.project.configuration.generated.impl.runtime.XMLSerializable, onepoint.project.configuration.generated.impl.runtime.ValidatableObject
{

    protected java.lang.String _SmtpServer;
    protected java.lang.String _DatabaseUrl;
    protected java.lang.String _DatabaseDriver;
    protected java.lang.String _ConnectionPoolMaxSize;
    protected onepoint.project.configuration.generated.OpConfigDatabasePassword _DatabasePassword;
    protected java.lang.String _JesDebugging;
    protected java.lang.String _DatabaseType;
    protected java.lang.String _SecureService;
    protected java.lang.String _CacheSize;
    protected onepoint.project.configuration.generated.OpLdapConfig _Ldap;
    protected java.lang.String _LogLevel;
    protected java.lang.String _ResourceCacheSize;
    protected java.lang.String _Browser;
    protected java.lang.String _DatabaseLogin;
    protected java.lang.String _ConnectionPoolMinSize;
    protected java.lang.String _BackupPath;
    protected java.lang.String _DatabasePath;
    protected java.lang.String _LogFile;
    public final static java.lang.Class version = (onepoint.project.configuration.generated.impl.JAXBVersion.class);
    private static com.sun.msv.grammar.Grammar schemaFragment;

    private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
        return (onepoint.project.configuration.generated.OpConfig.class);
    }

    public java.lang.String getSmtpServer() {
        return _SmtpServer;
    }

    public void setSmtpServer(java.lang.String value) {
        _SmtpServer = value;
    }

    public java.lang.String getDatabaseUrl() {
        return _DatabaseUrl;
    }

    public void setDatabaseUrl(java.lang.String value) {
        _DatabaseUrl = value;
    }

    public java.lang.String getDatabaseDriver() {
        return _DatabaseDriver;
    }

    public void setDatabaseDriver(java.lang.String value) {
        _DatabaseDriver = value;
    }

    public java.lang.String getConnectionPoolMaxSize() {
        return _ConnectionPoolMaxSize;
    }

    public void setConnectionPoolMaxSize(java.lang.String value) {
        _ConnectionPoolMaxSize = value;
    }

    public onepoint.project.configuration.generated.OpConfigDatabasePassword getDatabasePassword() {
        return _DatabasePassword;
    }

    public void setDatabasePassword(onepoint.project.configuration.generated.OpConfigDatabasePassword value) {
        _DatabasePassword = value;
    }

    public java.lang.String getJesDebugging() {
        return _JesDebugging;
    }

    public void setJesDebugging(java.lang.String value) {
        _JesDebugging = value;
    }

    public java.lang.String getDatabaseType() {
        return _DatabaseType;
    }

    public void setDatabaseType(java.lang.String value) {
        _DatabaseType = value;
    }

    public java.lang.String getSecureService() {
        return _SecureService;
    }

    public void setSecureService(java.lang.String value) {
        _SecureService = value;
    }

    public java.lang.String getCacheSize() {
        return _CacheSize;
    }

    public void setCacheSize(java.lang.String value) {
        _CacheSize = value;
    }

    public onepoint.project.configuration.generated.OpLdapConfig getLdap() {
        return _Ldap;
    }

    public void setLdap(onepoint.project.configuration.generated.OpLdapConfig value) {
        _Ldap = value;
    }

    public java.lang.String getLogLevel() {
        return _LogLevel;
    }

    public void setLogLevel(java.lang.String value) {
        _LogLevel = value;
    }

    public java.lang.String getResourceCacheSize() {
        return _ResourceCacheSize;
    }

    public void setResourceCacheSize(java.lang.String value) {
        _ResourceCacheSize = value;
    }

    public java.lang.String getBrowser() {
        return _Browser;
    }

    public void setBrowser(java.lang.String value) {
        _Browser = value;
    }

    public java.lang.String getDatabaseLogin() {
        return _DatabaseLogin;
    }

    public void setDatabaseLogin(java.lang.String value) {
        _DatabaseLogin = value;
    }

    public java.lang.String getConnectionPoolMinSize() {
        return _ConnectionPoolMinSize;
    }

    public void setConnectionPoolMinSize(java.lang.String value) {
        _ConnectionPoolMinSize = value;
    }

    public java.lang.String getBackupPath() {
        return _BackupPath;
    }

    public void setBackupPath(java.lang.String value) {
        _BackupPath = value;
    }

    public java.lang.String getDatabasePath() {
        return _DatabasePath;
    }

    public void setDatabasePath(java.lang.String value) {
        _DatabasePath = value;
    }

    public java.lang.String getLogFile() {
        return _LogFile;
    }

    public void setLogFile(java.lang.String value) {
        _LogFile = value;
    }

    public onepoint.project.configuration.generated.impl.runtime.UnmarshallingEventHandler createUnmarshaller(onepoint.project.configuration.generated.impl.runtime.UnmarshallingContext context) {
        return new onepoint.project.configuration.generated.impl.OpConfigImpl.Unmarshaller(context);
    }

    public void serializeBody(onepoint.project.configuration.generated.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        context.startElement("", "database-type");
        context.endNamespaceDecls();
        context.endAttributes();
        try {
            context.text(((java.lang.String) _DatabaseType), "DatabaseType");
        } catch (java.lang.Exception e) {
            onepoint.project.configuration.generated.impl.runtime.Util.handlePrintConversionException(this, e, context);
        }
        context.endElement();
        context.startElement("", "database-driver");
        context.endNamespaceDecls();
        context.endAttributes();
        try {
            context.text(((java.lang.String) _DatabaseDriver), "DatabaseDriver");
        } catch (java.lang.Exception e) {
            onepoint.project.configuration.generated.impl.runtime.Util.handlePrintConversionException(this, e, context);
        }
        context.endElement();
        context.startElement("", "database-url");
        context.endNamespaceDecls();
        context.endAttributes();
        try {
            context.text(((java.lang.String) _DatabaseUrl), "DatabaseUrl");
        } catch (java.lang.Exception e) {
            onepoint.project.configuration.generated.impl.runtime.Util.handlePrintConversionException(this, e, context);
        }
        context.endElement();
        context.startElement("", "database-login");
        context.endNamespaceDecls();
        context.endAttributes();
        try {
            context.text(((java.lang.String) _DatabaseLogin), "DatabaseLogin");
        } catch (java.lang.Exception e) {
            onepoint.project.configuration.generated.impl.runtime.Util.handlePrintConversionException(this, e, context);
        }
        context.endElement();
        context.startElement("", "database-password");
        context.childAsURIs(((com.sun.xml.bind.JAXBObject) _DatabasePassword), "DatabasePassword");
        context.endNamespaceDecls();
        context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _DatabasePassword), "DatabasePassword");
        context.endAttributes();
        context.childAsBody(((com.sun.xml.bind.JAXBObject) _DatabasePassword), "DatabasePassword");
        context.endElement();
        if (_DatabasePath!= null) {
            context.startElement("", "database-path");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(((java.lang.String) _DatabasePath), "DatabasePath");
            } catch (java.lang.Exception e) {
                onepoint.project.configuration.generated.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (_Browser!= null) {
            context.startElement("", "browser");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(((java.lang.String) _Browser), "Browser");
            } catch (java.lang.Exception e) {
                onepoint.project.configuration.generated.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (_SmtpServer!= null) {
            context.startElement("", "smtp-server");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(((java.lang.String) _SmtpServer), "SmtpServer");
            } catch (java.lang.Exception e) {
                onepoint.project.configuration.generated.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (_LogFile!= null) {
            context.startElement("", "log-file");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(((java.lang.String) _LogFile), "LogFile");
            } catch (java.lang.Exception e) {
                onepoint.project.configuration.generated.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (_LogLevel!= null) {
            context.startElement("", "log-level");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(((java.lang.String) _LogLevel), "LogLevel");
            } catch (java.lang.Exception e) {
                onepoint.project.configuration.generated.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (_ConnectionPoolMinSize!= null) {
            context.startElement("", "connection-pool-min-size");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(((java.lang.String) _ConnectionPoolMinSize), "ConnectionPoolMinSize");
            } catch (java.lang.Exception e) {
                onepoint.project.configuration.generated.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (_ConnectionPoolMaxSize!= null) {
            context.startElement("", "connection-pool-max-size");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(((java.lang.String) _ConnectionPoolMaxSize), "ConnectionPoolMaxSize");
            } catch (java.lang.Exception e) {
                onepoint.project.configuration.generated.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (_CacheSize!= null) {
            context.startElement("", "cache-size");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(((java.lang.String) _CacheSize), "CacheSize");
            } catch (java.lang.Exception e) {
                onepoint.project.configuration.generated.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (_JesDebugging!= null) {
            context.startElement("", "jes-debugging");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(((java.lang.String) _JesDebugging), "JesDebugging");
            } catch (java.lang.Exception e) {
                onepoint.project.configuration.generated.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (_SecureService!= null) {
            context.startElement("", "secure-service");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(((java.lang.String) _SecureService), "SecureService");
            } catch (java.lang.Exception e) {
                onepoint.project.configuration.generated.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (_ResourceCacheSize!= null) {
            context.startElement("", "resource-cache-size");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(((java.lang.String) _ResourceCacheSize), "ResourceCacheSize");
            } catch (java.lang.Exception e) {
                onepoint.project.configuration.generated.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (_BackupPath!= null) {
            context.startElement("", "backup-path");
            context.endNamespaceDecls();
            context.endAttributes();
            try {
                context.text(((java.lang.String) _BackupPath), "BackupPath");
            } catch (java.lang.Exception e) {
                onepoint.project.configuration.generated.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        if (_Ldap!= null) {
            context.startElement("", "ldap");
            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Ldap), "Ldap");
            context.endNamespaceDecls();
            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Ldap), "Ldap");
            context.endAttributes();
            context.childAsBody(((com.sun.xml.bind.JAXBObject) _Ldap), "Ldap");
            context.endElement();
        }
    }

    public void serializeAttributes(onepoint.project.configuration.generated.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
    }

    public void serializeURIs(onepoint.project.configuration.generated.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
    }

    public java.lang.Class getPrimaryInterface() {
        return (onepoint.project.configuration.generated.OpConfig.class);
    }

    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
        if (schemaFragment == null) {
            schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000!com.sun.msv.grammar.InterleaveExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom."
+"sun.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/g"
+"rammar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expres"
+"sion\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava/lang/Boolean;L"
+"\u0000\u000bexpandedExpq\u0000~\u0000\u0002xpppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000"
+"ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq"
+"\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsr\u0000\'com.sun.msv.grammar.trex.E"
+"lementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\tnameClasst\u0000\u001fLcom/sun/msv/grammar/"
+"NameClass;xr\u0000\u001ecom.sun.msv.grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aig"
+"noreUndeclaredAttributesL\u0000\fcontentModelq\u0000~\u0000\u0002xq\u0000~\u0000\u0003pp\u0000sr\u0000\u001fcom"
+".sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001ppsr\u0000\u001bcom.sun.m"
+"sv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/D"
+"atatype;L\u0000\u0006exceptq\u0000~\u0000\u0002L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/StringPair"
+";xq\u0000~\u0000\u0003ppsr\u0000#com.sun.msv.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z"
+"\u0000\risAlwaysValidxr\u0000*com.sun.msv.datatype.xsd.BuiltinAtomicTyp"
+"e\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000"
+"\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000"
+"\fnamespaceUrit\u0000\u0012Ljava/lang/String;L\u0000\btypeNameq\u0000~\u0000$L\u0000\nwhiteSp"
+"acet\u0000.Lcom/sun/msv/datatype/xsd/WhiteSpaceProcessor;xpt\u0000 htt"
+"p://www.w3.org/2001/XMLSchemat\u0000\u0006stringsr\u00005com.sun.msv.dataty"
+"pe.xsd.WhiteSpaceProcessor$Preserve\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.ms"
+"v.datatype.xsd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp\u0001sr\u00000com.sun."
+"msv.grammar.Expression$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003pps"
+"r\u0000\u001bcom.sun.msv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000$L\u0000"
+"\fnamespaceURIq\u0000~\u0000$xpq\u0000~\u0000(q\u0000~\u0000\'sr\u0000\u001dcom.sun.msv.grammar.Choice"
+"Exp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001ppsr\u0000 com.sun.msv.grammar.AttributeExp\u0000\u0000"
+"\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnameClassq\u0000~\u0000\u0017xq\u0000~\u0000\u0003sr\u0000\u0011java.lang.Boo"
+"lean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000psq\u0000~\u0000\u001cppsr\u0000\"com.sun.msv.datatype."
+"xsd.QnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000!q\u0000~\u0000\'t\u0000\u0005QNamesr\u00005com.sun.msv.d"
+"atatype.xsd.WhiteSpaceProcessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000*q\u0000~"
+"\u0000-sq\u0000~\u0000.q\u0000~\u00009q\u0000~\u0000\'sr\u0000#com.sun.msv.grammar.SimpleNameClass\u0000\u0000\u0000"
+"\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000$L\u0000\fnamespaceURIq\u0000~\u0000$xr\u0000\u001dcom.sun.msv"
+".grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpt\u0000\u0004typet\u0000)http://www.w3.org/2"
+"001/XMLSchema-instancesr\u00000com.sun.msv.grammar.Expression$Eps"
+"ilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003sq\u0000~\u00004\u0001q\u0000~\u0000Csq\u0000~\u0000=t\u0000\rdatabase"
+"-typet\u0000\u0000sq\u0000~\u0000\u0016pp\u0000sq\u0000~\u0000\u001appq\u0000~\u0000\u001fsq\u0000~\u00000ppsq\u0000~\u00002q\u0000~\u00005pq\u0000~\u00006q\u0000~\u0000?"
+"q\u0000~\u0000Csq\u0000~\u0000=t\u0000\u000fdatabase-driverq\u0000~\u0000Gsq\u0000~\u0000\u0016pp\u0000sq\u0000~\u0000\u001appq\u0000~\u0000\u001fsq\u0000~"
+"\u00000ppsq\u0000~\u00002q\u0000~\u00005pq\u0000~\u00006q\u0000~\u0000?q\u0000~\u0000Csq\u0000~\u0000=t\u0000\fdatabase-urlq\u0000~\u0000Gsq\u0000"
+"~\u0000\u0016pp\u0000sq\u0000~\u0000\u001appq\u0000~\u0000\u001fsq\u0000~\u00000ppsq\u0000~\u00002q\u0000~\u00005pq\u0000~\u00006q\u0000~\u0000?q\u0000~\u0000Csq\u0000~\u0000="
+"t\u0000\u000edatabase-loginq\u0000~\u0000Gsq\u0000~\u0000\u0016pp\u0000sq\u0000~\u0000\u001appsq\u0000~\u0000\u0016pp\u0000sq\u0000~\u00000ppsr\u0000 "
+"com.sun.msv.grammar.OneOrMoreExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001ccom.sun.msv.g"
+"rammar.UnaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0003expq\u0000~\u0000\u0002xq\u0000~\u0000\u0003q\u0000~\u00005psq\u0000~\u00002q\u0000~\u00005"
+"psr\u00002com.sun.msv.grammar.Expression$AnyStringExpression\u0000\u0000\u0000\u0000\u0000"
+"\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003q\u0000~\u0000Dq\u0000~\u0000csr\u0000 com.sun.msv.grammar.AnyNameClass\u0000\u0000"
+"\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000>q\u0000~\u0000Csq\u0000~\u0000=t\u0000Aonepoint.project.configuration."
+"generated.OpConfigDatabasePasswordt\u0000+http://java.sun.com/jax"
+"b/xjc/dummy-elementssq\u0000~\u00000ppsq\u0000~\u00002q\u0000~\u00005pq\u0000~\u00006q\u0000~\u0000?q\u0000~\u0000Csq\u0000~\u0000"
+"=t\u0000\u0011database-passwordq\u0000~\u0000Gsq\u0000~\u00000ppsq\u0000~\u0000\u0016q\u0000~\u00005p\u0000sq\u0000~\u0000\u001appq\u0000~\u0000\u001f"
+"sq\u0000~\u00000ppsq\u0000~\u00002q\u0000~\u00005pq\u0000~\u00006q\u0000~\u0000?q\u0000~\u0000Csq\u0000~\u0000=t\u0000\rdatabase-pathq\u0000~"
+"\u0000Gq\u0000~\u0000Csq\u0000~\u00000ppsq\u0000~\u0000\u0016q\u0000~\u00005p\u0000sq\u0000~\u0000\u001appq\u0000~\u0000\u001fsq\u0000~\u00000ppsq\u0000~\u00002q\u0000~\u00005"
+"pq\u0000~\u00006q\u0000~\u0000?q\u0000~\u0000Csq\u0000~\u0000=t\u0000\u0007browserq\u0000~\u0000Gq\u0000~\u0000Csq\u0000~\u00000ppsq\u0000~\u0000\u0016q\u0000~\u0000"
+"5p\u0000sq\u0000~\u0000\u001appq\u0000~\u0000\u001fsq\u0000~\u00000ppsq\u0000~\u00002q\u0000~\u00005pq\u0000~\u00006q\u0000~\u0000?q\u0000~\u0000Csq\u0000~\u0000=t\u0000\u000b"
+"smtp-serverq\u0000~\u0000Gq\u0000~\u0000Csq\u0000~\u00000ppsq\u0000~\u0000\u0016q\u0000~\u00005p\u0000sq\u0000~\u0000\u001appq\u0000~\u0000\u001fsq\u0000~\u0000"
+"0ppsq\u0000~\u00002q\u0000~\u00005pq\u0000~\u00006q\u0000~\u0000?q\u0000~\u0000Csq\u0000~\u0000=t\u0000\blog-fileq\u0000~\u0000Gq\u0000~\u0000Csq\u0000"
+"~\u00000ppsq\u0000~\u0000\u0016q\u0000~\u00005p\u0000sq\u0000~\u0000\u001appq\u0000~\u0000\u001fsq\u0000~\u00000ppsq\u0000~\u00002q\u0000~\u00005pq\u0000~\u00006q\u0000~\u0000"
+"?q\u0000~\u0000Csq\u0000~\u0000=t\u0000\tlog-levelq\u0000~\u0000Gq\u0000~\u0000Csq\u0000~\u00000ppsq\u0000~\u0000\u0016q\u0000~\u00005p\u0000sq\u0000~\u0000"
+"\u001appq\u0000~\u0000\u001fsq\u0000~\u00000ppsq\u0000~\u00002q\u0000~\u00005pq\u0000~\u00006q\u0000~\u0000?q\u0000~\u0000Csq\u0000~\u0000=t\u0000\u0018connecti"
+"on-pool-min-sizeq\u0000~\u0000Gq\u0000~\u0000Csq\u0000~\u00000ppsq\u0000~\u0000\u0016q\u0000~\u00005p\u0000sq\u0000~\u0000\u001appq\u0000~\u0000\u001f"
+"sq\u0000~\u00000ppsq\u0000~\u00002q\u0000~\u00005pq\u0000~\u00006q\u0000~\u0000?q\u0000~\u0000Csq\u0000~\u0000=t\u0000\u0018connection-pool-"
+"max-sizeq\u0000~\u0000Gq\u0000~\u0000Csq\u0000~\u00000ppsq\u0000~\u0000\u0016q\u0000~\u00005p\u0000sq\u0000~\u0000\u001appq\u0000~\u0000\u001fsq\u0000~\u00000pp"
+"sq\u0000~\u00002q\u0000~\u00005pq\u0000~\u00006q\u0000~\u0000?q\u0000~\u0000Csq\u0000~\u0000=t\u0000\ncache-sizeq\u0000~\u0000Gq\u0000~\u0000Csq\u0000~"
+"\u00000ppsq\u0000~\u0000\u0016q\u0000~\u00005p\u0000sq\u0000~\u0000\u001appq\u0000~\u0000\u001fsq\u0000~\u00000ppsq\u0000~\u00002q\u0000~\u00005pq\u0000~\u00006q\u0000~\u0000?"
+"q\u0000~\u0000Csq\u0000~\u0000=t\u0000\rjes-debuggingq\u0000~\u0000Gq\u0000~\u0000Csq\u0000~\u00000ppsq\u0000~\u0000\u0016q\u0000~\u00005p\u0000sq"
+"\u0000~\u0000\u001appq\u0000~\u0000\u001fsq\u0000~\u00000ppsq\u0000~\u00002q\u0000~\u00005pq\u0000~\u00006q\u0000~\u0000?q\u0000~\u0000Csq\u0000~\u0000=t\u0000\u000esecur"
+"e-serviceq\u0000~\u0000Gq\u0000~\u0000Csq\u0000~\u00000ppsq\u0000~\u0000\u0016q\u0000~\u00005p\u0000sq\u0000~\u0000\u001appq\u0000~\u0000\u001fsq\u0000~\u00000p"
+"psq\u0000~\u00002q\u0000~\u00005pq\u0000~\u00006q\u0000~\u0000?q\u0000~\u0000Csq\u0000~\u0000=t\u0000\u0013resource-cache-sizeq\u0000~\u0000"
+"Gq\u0000~\u0000Csq\u0000~\u00000ppsq\u0000~\u0000\u0016q\u0000~\u00005p\u0000sq\u0000~\u0000\u001appq\u0000~\u0000\u001fsq\u0000~\u00000ppsq\u0000~\u00002q\u0000~\u00005p"
+"q\u0000~\u00006q\u0000~\u0000?q\u0000~\u0000Csq\u0000~\u0000=t\u0000\u000bbackup-pathq\u0000~\u0000Gq\u0000~\u0000Csq\u0000~\u00000ppsq\u0000~\u0000\u0016q"
+"\u0000~\u00005p\u0000sq\u0000~\u0000\u001appsq\u0000~\u0000\u0016pp\u0000sq\u0000~\u00000ppsq\u0000~\u0000^q\u0000~\u00005psq\u0000~\u00002q\u0000~\u00005pq\u0000~\u0000c"
+"q\u0000~\u0000eq\u0000~\u0000Csq\u0000~\u0000=t\u00005onepoint.project.configuration.generated."
+"OpLdapConfigq\u0000~\u0000hsq\u0000~\u00000ppsq\u0000~\u00002q\u0000~\u00005pq\u0000~\u00006q\u0000~\u0000?q\u0000~\u0000Csq\u0000~\u0000=t\u0000"
+"\u0004ldapq\u0000~\u0000Gq\u0000~\u0000Csr\u0000\"com.sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000"
+"\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/sun/msv/grammar/ExpressionPool$Closed"
+"Hash;xpsr\u0000-com.sun.msv.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N"
+"\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000\rstreamVersionL\u0000\u0006parentt\u0000$Lcom/sun/msv/gram"
+"mar/ExpressionPool;xp\u0000\u0000\u0000F\u0001pq\u0000~\u0000pq\u0000~\u0000iq\u0000~\u0000Vq\u0000~\u0000Pq\u0000~\u0000Jq\u0000~\u00001q\u0000~"
+"\u0000\u00bdq\u0000~\u0000\u00caq\u0000~\u0000`q\u0000~\u0000\u00c6q\u0000~\u0000[q\u0000~\u0000\u00c3q\u0000~\u0000\u0007q\u0000~\u0000\u00c1q\u0000~\u0000\u000bq\u0000~\u0000\u0014q\u0000~\u0000\fq\u0000~\u0000\bq\u0000~"
+"\u0000\u0010q\u0000~\u0000]q\u0000~\u0000\u00c5q\u0000~\u0000\u00acq\u0000~\u0000\u00a5q\u0000~\u0000\u009eq\u0000~\u0000\u0097q\u0000~\u0000\u0090q\u0000~\u0000\u0089q\u0000~\u0000\u0082q\u0000~\u0000{q\u0000~\u0000tq\u0000~"
+"\u0000mq\u0000~\u0000\u00b3q\u0000~\u0000\u00baq\u0000~\u0000\u0013q\u0000~\u0000\u0015q\u0000~\u0000\u0012q\u0000~\u0000\nq\u0000~\u0000\u0011q\u0000~\u0000\u0006q\u0000~\u0000\u00aeq\u0000~\u0000\u00a7q\u0000~\u0000\u00a0q\u0000~"
+"\u0000\u0099q\u0000~\u0000\u0092q\u0000~\u0000\u008bq\u0000~\u0000\u0084q\u0000~\u0000}q\u0000~\u0000vq\u0000~\u0000oq\u0000~\u0000Uq\u0000~\u0000Oq\u0000~\u0000Iq\u0000~\u0000\u001bq\u0000~\u0000\tq\u0000~"
+"\u0000\u00b5q\u0000~\u0000\u00bcq\u0000~\u0000\u000fq\u0000~\u0000\u000eq\u0000~\u0000\u0005q\u0000~\u0000\rq\u0000~\u0000\u00b6q\u0000~\u0000\u00afq\u0000~\u0000\u00a8q\u0000~\u0000\u00a1q\u0000~\u0000\u009aq\u0000~\u0000\u0093q\u0000~"
+"\u0000\u008cq\u0000~\u0000\u0085q\u0000~\u0000~q\u0000~\u0000wx"));
        }
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }

    public class Unmarshaller
        extends onepoint.project.configuration.generated.impl.runtime.AbstractUnmarshallingEventHandlerImpl
    {


        public Unmarshaller(onepoint.project.configuration.generated.impl.runtime.UnmarshallingContext context) {
            super(context, "-------------------------------------");
        }

        protected Unmarshaller(onepoint.project.configuration.generated.impl.runtime.UnmarshallingContext context, int startState) {
            this(context);
            state = startState;
        }

        public java.lang.Object owner() {
            return onepoint.project.configuration.generated.impl.OpConfigImpl.this;
        }

        public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  0 :
                        if (("ldap" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 35;
                            return ;
                        }
                        if (("backup-path" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 31;
                            return ;
                        }
                        if (("resource-cache-size" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 17;
                            return ;
                        }
                        if (("secure-service" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 23;
                            return ;
                        }
                        if (("jes-debugging" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 3;
                            return ;
                        }
                        if (("cache-size" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 19;
                            return ;
                        }
                        if (("connection-pool-max-size" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 7;
                            return ;
                        }
                        if (("connection-pool-min-size" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 1;
                            return ;
                        }
                        if (("log-level" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 13;
                            return ;
                        }
                        if (("log-file" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 15;
                            return ;
                        }
                        if (("smtp-server" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 33;
                            return ;
                        }
                        if (("browser" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 29;
                            return ;
                        }
                        if (("database-path" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 9;
                            return ;
                        }
                        if (("database-password" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 27;
                            return ;
                        }
                        if (("database-login" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 25;
                            return ;
                        }
                        if (("database-url" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 11;
                            return ;
                        }
                        if (("database-driver" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 5;
                            return ;
                        }
                        if (("database-type" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 21;
                            return ;
                        }
                        revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                        return ;
                    case  35 :
                        if (("connection" == ___local)&&("" == ___uri)) {
                            _Ldap = ((onepoint.project.configuration.generated.impl.OpLdapConfigImpl) spawnChildFromEnterElement((onepoint.project.configuration.generated.impl.OpLdapConfigImpl.class), 36, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        _Ldap = ((onepoint.project.configuration.generated.impl.OpLdapConfigImpl) spawnChildFromEnterElement((onepoint.project.configuration.generated.impl.OpLdapConfigImpl.class), 36, ___uri, ___local, ___qname, __atts));
                        return ;
                    case  27 :
                        attIdx = context.getAttribute("", "encrypted");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        break;
                }
                super.enterElement(___uri, ___local, ___qname, __atts);
                break;
            }
        }

        public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  22 :
                        if (("database-type" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 0;
                            return ;
                        }
                        break;
                    case  12 :
                        if (("database-url" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 0;
                            return ;
                        }
                        break;
                    case  26 :
                        if (("database-login" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 0;
                            return ;
                        }
                        break;
                    case  18 :
                        if (("resource-cache-size" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 0;
                            return ;
                        }
                        break;
                    case  32 :
                        if (("backup-path" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 0;
                            return ;
                        }
                        break;
                    case  14 :
                        if (("log-level" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 0;
                            return ;
                        }
                        break;
                    case  20 :
                        if (("cache-size" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 0;
                            return ;
                        }
                        break;
                    case  16 :
                        if (("log-file" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 0;
                            return ;
                        }
                        break;
                    case  0 :
                        revertToParentFromLeaveElement(___uri, ___local, ___qname);
                        return ;
                    case  35 :
                        _Ldap = ((onepoint.project.configuration.generated.impl.OpLdapConfigImpl) spawnChildFromLeaveElement((onepoint.project.configuration.generated.impl.OpLdapConfigImpl.class), 36, ___uri, ___local, ___qname));
                        return ;
                    case  10 :
                        if (("database-path" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 0;
                            return ;
                        }
                        break;
                    case  8 :
                        if (("connection-pool-max-size" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 0;
                            return ;
                        }
                        break;
                    case  6 :
                        if (("database-driver" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 0;
                            return ;
                        }
                        break;
                    case  30 :
                        if (("browser" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 0;
                            return ;
                        }
                        break;
                    case  4 :
                        if (("jes-debugging" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 0;
                            return ;
                        }
                        break;
                    case  28 :
                        if (("database-password" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 0;
                            return ;
                        }
                        break;
                    case  34 :
                        if (("smtp-server" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 0;
                            return ;
                        }
                        break;
                    case  2 :
                        if (("connection-pool-min-size" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 0;
                            return ;
                        }
                        break;
                    case  24 :
                        if (("secure-service" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 0;
                            return ;
                        }
                        break;
                    case  27 :
                        attIdx = context.getAttribute("", "encrypted");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  36 :
                        if (("ldap" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 0;
                            return ;
                        }
                        break;
                }
                super.leaveElement(___uri, ___local, ___qname);
                break;
            }
        }

        public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  0 :
                        revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                        return ;
                    case  35 :
                        _Ldap = ((onepoint.project.configuration.generated.impl.OpLdapConfigImpl) spawnChildFromEnterAttribute((onepoint.project.configuration.generated.impl.OpLdapConfigImpl.class), 36, ___uri, ___local, ___qname));
                        return ;
                    case  27 :
                        if (("encrypted" == ___local)&&("" == ___uri)) {
                            _DatabasePassword = ((onepoint.project.configuration.generated.impl.OpConfigDatabasePasswordImpl) spawnChildFromEnterAttribute((onepoint.project.configuration.generated.impl.OpConfigDatabasePasswordImpl.class), 28, ___uri, ___local, ___qname));
                            return ;
                        }
                        break;
                }
                super.enterAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  0 :
                        revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                        return ;
                    case  35 :
                        _Ldap = ((onepoint.project.configuration.generated.impl.OpLdapConfigImpl) spawnChildFromLeaveAttribute((onepoint.project.configuration.generated.impl.OpLdapConfigImpl.class), 36, ___uri, ___local, ___qname));
                        return ;
                    case  27 :
                        attIdx = context.getAttribute("", "encrypted");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                }
                super.leaveAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void handleText(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                try {
                    switch (state) {
                        case  17 :
                            state = 18;
                            eatText1(value);
                            return ;
                        case  13 :
                            state = 14;
                            eatText2(value);
                            return ;
                        case  7 :
                            state = 8;
                            eatText3(value);
                            return ;
                        case  0 :
                            revertToParentFromText(value);
                            return ;
                        case  35 :
                            _Ldap = ((onepoint.project.configuration.generated.impl.OpLdapConfigImpl) spawnChildFromText((onepoint.project.configuration.generated.impl.OpLdapConfigImpl.class), 36, value));
                            return ;
                        case  33 :
                            state = 34;
                            eatText4(value);
                            return ;
                        case  29 :
                            state = 30;
                            eatText5(value);
                            return ;
                        case  15 :
                            state = 16;
                            eatText6(value);
                            return ;
                        case  5 :
                            state = 6;
                            eatText7(value);
                            return ;
                        case  21 :
                            state = 22;
                            eatText8(value);
                            return ;
                        case  19 :
                            state = 20;
                            eatText9(value);
                            return ;
                        case  1 :
                            state = 2;
                            eatText10(value);
                            return ;
                        case  9 :
                            state = 10;
                            eatText11(value);
                            return ;
                        case  3 :
                            state = 4;
                            eatText12(value);
                            return ;
                        case  11 :
                            state = 12;
                            eatText13(value);
                            return ;
                        case  23 :
                            state = 24;
                            eatText14(value);
                            return ;
                        case  31 :
                            state = 32;
                            eatText15(value);
                            return ;
                        case  27 :
                            attIdx = context.getAttribute("", "encrypted");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            _DatabasePassword = ((onepoint.project.configuration.generated.impl.OpConfigDatabasePasswordImpl) spawnChildFromText((onepoint.project.configuration.generated.impl.OpConfigDatabasePasswordImpl.class), 28, value));
                            return ;
                        case  25 :
                            state = 26;
                            eatText16(value);
                            return ;
                    }
                } catch (java.lang.RuntimeException e) {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }

        private void eatText1(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _ResourceCacheSize = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText2(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _LogLevel = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText3(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _ConnectionPoolMaxSize = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText4(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _SmtpServer = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText5(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Browser = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText6(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _LogFile = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText7(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _DatabaseDriver = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText8(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _DatabaseType = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText9(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _CacheSize = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText10(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _ConnectionPoolMinSize = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText11(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _DatabasePath = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText12(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _JesDebugging = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText13(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _DatabaseUrl = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText14(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _SecureService = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText15(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _BackupPath = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText16(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _DatabaseLogin = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

    }

}
