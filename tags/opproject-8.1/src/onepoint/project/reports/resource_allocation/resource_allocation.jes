/*
 * Copyright(c) OnePoint Software GmbH 2007. All Rights Reserved.
 */

// Reporting script for resource_allocation.oxf.xml

require "onepoint/project/scripts/lazyLoad.jes";

import onepoint.express.XDisplay;
import onepoint.express.XValidator;
import onepoint.service.XMessage;


function runQuery() {
   form = XDisplay.findFrame("QueryFrame").currentForm();
   // *** Refresh form w/data-fields as parameters and a special boolean parameter runQuery=true
   choice = form.findComponent("ProjectLocatorField").getStringValue();
   project = form.findComponent("ProjectNameField").getStringValue();
   if (choice != null && project != null) {
      parameters.RunQuery = true;
      parameters.ProjectLocator = XValidator.choiceID(choice);
      XDisplay.findFrame("QueryFrame").refreshForm(parameters);
   }

}


/**
 * Creates a request that will be invoked when executing this report.
 */
function createRequest() {
   form = XDisplay.findFrame("QueryFrame").currentForm();
   projects = getSelectedProjects(form);
   errorLabel = form.findComponent("ErrorLabel");

   if (projects.size() > 0) {
      if (errorLabel.getVisible()) {
         errorLabel.setVisible(false);
         form.doLayout();
         form.repaint();
      }

      //important: as we can only have one "mainfile" in a jar, we refer here to the jar!!!
      name = "resourceallocation.jar";

      //report formats
      formats[0] = "PDF";

      //report parameters
      reportForm = XDisplay.findFrame("MainFrame").currentForm();
      parameters.Currency = reportForm.findComponent("Currency").getValue();

      request = new XMessage;
      request.setArgument("name", name);
      request.setArgument("formats", formats);
      request.setArgument("parameters", parameters);
      request.setArgument("projectChoiceList", projects);

      return request;
   }
   else {
      errorLabel.setVisible(true);
      form.doLayout();
      form.repaint();
      return null;
   }
}

/**
 * Returns a query that will be used to fill up the report.
 */
function getReportQuery() {
   form = XDisplay.findFrame("QueryFrame").currentForm();
   projects = getSelectedProjects(form);

   if (projects != null) {

      selectClause1 = "select projectNode.Name, pool.Name, pool.Description, resource.Name, resource.Description, asgn.RemainingPersonnelCosts, ";
      selectClause2 = " superActivity.Name, activity.Name, activity.Start, activity.Finish, asgn.RemainingEffort";
      fromClause1 = " from OpAssignment asgn inner join asgn.Activity activity left outer join activity.SuperActivity superActivity inner join asgn.Resource resource inner join resource.Pool pool ";
      fromClause2 = " inner join activity.ProjectPlan plan inner join plan.ProjectNode projectNode";
      whereClause = " where projectNode.id in (:collection0) and projectNode.Archived=false and asgn.RemainingEffort > 0 order by projectNode.Name, pool.Name, resource.Name, activity.Start";

      queryString = selectClause1 + selectClause2 + fromClause1 + fromClause2 + whereClause;
      Console.println("Resource allocation query:" + queryString);

      query.queryString = queryString;

      query.queryParams[0] = projects;
   }
   return query;
}

/**
 * Returns a map of [reportFieldName, reportFieldIndex] pairs that indicated how the fields from the report map to the
 * result of the query.
 */
function getReportFields() {
   result.pn_name = 0;
   result.po_name = 1;
   result.po_description = 2;
   result.rs_name = 3;
   result.rs_description = 4;
   result.remaining_personnel_costs = 5;
   result.sac_name = 6;
   result.op_name = 7;
   result.op_start = 8;
   result.op_finish = 9;
   result.op_remainingeffort = 10;

   return result;
}

function getResourceMapId() {
   return "resource.objects";
}
function prepareForm(event) {
   button = XDisplay.findFrame("QueryFrame").getForm().findComponent("PrintButton");
   button.setEnabled(false);
   button.update();
   button = XDisplay.findFrame("QueryFrame").getForm().findComponent("RunQueryButton");
   button.setEnabled(false);
   button.update();
   button = XDisplay.findFrame("QueryFrame").getForm().findComponent("ResetQueryButton");
   button.setEnabled(false);
   button.update();
}

function retrieveChildren(event) {
   dataRow = event.expand_source;
   request = new XMessage;
   request.setAction("ProjectService.expandProjectChooserNode");
   request.setArgument("project_row", dataRow);
   request.setArgument("EnableProjects", true);
   request.setArgument("EnablePortfolios", false);
   request.setArgument("EnableTemplates", false);
   expandNode(dataRow, 1, request);
}

function getSelectedProjects(form){
   project_data_set = form.findComponent("ProjectSet");
   selected_rows = project_data_set.selectedRows();
   selection_size = selected_rows.size();
   selectedLocators = new ArrayList;
   if (selection_size > 0) {
      i = 0;
      while (i < selection_size) {
         projectChoice = selected_rows[i].getStringValue();
         selectedLocators[i] = XValidator.choiceID(projectChoice);
         i++;
      }
   }
   return selectedLocators;
}
