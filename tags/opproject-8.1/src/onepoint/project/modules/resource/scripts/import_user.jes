/*
 * Copyright(c) OnePoint Software GmbH 2007. All Rights Reserved.
 */

// Controller script for import_user.oxf.xml

require "onepoint/project/scripts/error.jes";
require "onepoint/project/modules/project/scripts/open_project_chooser.jes";

import onepoint.express.XDisplay;
import onepoint.express.XComponent;
import onepoint.service.XMessage;
import onepoint.express.XValidator;

function ok(event) {
   // Gather resource-data
   form = XDisplay.getActiveForm();

   resource_data.Available = form.findComponent("Available").getDoubleValue();
   resource_data.HourlyRate = form.findComponent("HourlyRate").getDoubleValue();
   resource_data.ExternalRate = form.findComponent("ExternalRate").getDoubleValue();
   resource_data.InheritPoolRate = !form.findComponent("InheritPoolRate").getBooleanValue();
   
   pool = form.findComponent("PoolList").getStringValue();
   resource_data.PoolID = XValidator.choiceID(pool);

   assigned_project_data_set = form.findComponent("AssignedProjectDataSet");
   i = 0;
   while (i < assigned_project_data_set.getChildCount()) {
      assigned_projects[i] = assigned_project_data_set.getChild(i).getStringValue();
      i++;
   }
   resource_data.Projects = assigned_projects;

   // now get all selected users and import them as new resource
   user_data_set = form.findComponent("UserDataSet");
   selected_rows = user_data_set.selectedRows();
   i = 0;
   validate = true;
   while (i < selected_rows.size()) {
      resource_data.UserID = selected_rows[i].getStringValue();

      request = new XMessage;
      request.setAction("ResourceService.importUser");
      request.setArgument("resource_data", resource_data);
      response = XDisplay.getClient().invokeMethod(request);

      validate = handleError(form, response, "ErrorLabel");
      i++;
   }

   if ((selected_rows.size() > 0) && validate) {
      XDisplay.getActiveWindow().close();
      XDisplay.findFrame("MainFrame").refreshForm();
   }
}

function cancel(event) {
   XDisplay.getActiveWindow().close();
}

function addProject(event) {
   form = XDisplay.getActiveForm();
   assignedProjects = form.findComponent("AssignedProjectDataSet");
   i = 0;
   while (i < assignedProjects.getChildCount()) {
      assignedDataRow = assignedProjects.getChild(i);
      filteredIds[i] = XValidator.choiceID(assignedDataRow.getStringValue());
      i++;
   }
   openProjectChooser("MainFrame", "assignToProject_NewEdit", null, null, true, false, false, filteredIds, true, null);
}

function removeProject(event) {
   form = XDisplay.getActiveForm();
   assigned_project_data_set = form.findComponent("AssignedProjectDataSet");
   selected_rows = assigned_project_data_set.selectedRows();
   assigned_project_data_set.removeDataRows(selected_rows);
   // Update assigned project list
   assigned_project_list_box = form.findComponent("AssignedProjectListBox");
   assigned_project_list_box.update();
}

function inheritPoolRate(event) {
   form = XDisplay.getActiveForm();
   selectedPool = form.findComponent("PoolList").getValue();
   poolsRates = form.findComponent("PoolsRates").getValue();
   source = event.event_source;
   shouldOverride = source.getValue();
   hourlyRateField = form.findComponent("HourlyRate");
   externalRateField = form.findComponent("ExternalRate");
   if (shouldOverride == true) {
      hourlyRateField.setEnabled(true);
      externalRateField.setEnabled(true);
   }
   else {
      ratesList = poolsRates.get(selectedPool);
      hourlyRateField.setEnabled(false);
      hourlyRateField.setDoubleValue(ratesList[0]);
      externalRateField.setEnabled(false);
      externalRateField.setDoubleValue(ratesList[1]);
   }
   form.update();
}